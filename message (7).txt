#include <iostream>
#include <vector>
#include <thread>
#include <sys/epoll.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <unistd.h>
#include <fcntl.h>
#include <cstring>

const int NUM_REQUESTS = 1;
const int NUM_THREADS = 1;
const char* HOST = "172.25.9.44";
const char* PORT = "8080";
const char* REQUEST = "GET /search.php?q=WANDY%20RUTKIEWICZ%20A%20WrocÅ‚aw HTTP/1.1\r\nHost: dft-everace:8080\r\nConnection: close\r\n\r\n";

int create_socket(const char* host, const char* port) {
    struct addrinfo hints, *res;
    int sockfd;

    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;

    if (getaddrinfo(host, port, &hints, &res) != 0) {
        perror("getaddrinfo");
        exit(1);
    }

    sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
    if (sockfd == -1) {
        perror("socket");
        exit(1);
    }

    if (connect(sockfd, res->ai_addr, res->ai_addrlen) == -1) {
        perror("connect");
        close(sockfd);
        exit(1);
    }

    freeaddrinfo(res);
    return sockfd;
}

void set_nonblocking(int sockfd) {
    int flags = fcntl(sockfd, F_GETFL, 0);
    fcntl(sockfd, F_SETFL, flags | O_NONBLOCK);
}

void perform_requests(int thread_id, int num_requests) {
    int epoll_fd = epoll_create1(0);
    if (epoll_fd == -1) {
        perror("epoll_create1");
        exit(1);
    }

    std::vector<int> sockets(num_requests);
    epoll_event ev, events[num_requests];

    for (int i = 0; i < num_requests; ++i) {
        int sockfd = create_socket(HOST, PORT);
        set_nonblocking(sockfd);

        sockets[i] = sockfd;

        ev.events = EPOLLOUT;
        ev.data.fd = sockfd;
        if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, sockfd, &ev) == -1) {
            perror("epoll_ctl: EPOLLOUT");
            exit(1);
        }
    }

    while (!sockets.empty()) {
        int nfds = epoll_wait(epoll_fd, events, num_requests, -1);
        if (nfds == -1) {
            perror("epoll_wait");
            exit(1);
        }

        for (int n = 0; n < nfds; ++n) {
            int sockfd = events[n].data.fd;
            if (events[n].events & EPOLLOUT) {
                send(sockfd, REQUEST, strlen(REQUEST), 0);

                ev.events = EPOLLIN;
                ev.data.fd = sockfd;
                if (epoll_ctl(epoll_fd, EPOLL_CTL_MOD, sockfd, &ev) == -1) {
                    perror("epoll_ctl: EPOLLIN");
                    exit(1);
                }
            } else if (events[n].events & EPOLLIN) {
                char buffer[4096];
                int bytes_read = read(sockfd, buffer, sizeof(buffer));
                if (bytes_read > 0) {
                    std::cout.write(buffer, bytes_read);
                } else {
                    close(sockfd);
                    sockets.erase(std::remove(sockets.begin(), sockets.end(), sockfd), sockets.end());
                }
            }
        }
    }

    close(epoll_fd);
}

int main() {
    std::vector<std::thread> threads;
    int requests_per_thread = NUM_REQUESTS / NUM_THREADS;

    for (int i = 0; i < NUM_THREADS; ++i) {
        threads.emplace_back(perform_requests, i, requests_per_thread);
    }

    for (auto& t : threads) {
        t.join();
    }

    return 0;
}