# Sprawdzenie, czy punkty są przypisane do więcej niż jednej gminy
punkty_przypisane_wielokrotnie <- punkty_gminy %>%
  group_by(REGON) %>%
  summarise(ilosc_budynkow = sum(ilosc, na.rm = TRUE), liczba_punktow = n()) %>%
  filter(liczba_punktow > 1)

# Wynik pokazuje gminy, do których punkty są przypisane wielokrotnie
cat("Liczba gmin, do których punkty przypisano wielokrotnie:", nrow(punkty_przypisane_wielokrotnie), "\n")
print(punkty_przypisane_wielokrotnie)


# Poprawne przypisanie punktów do gmin przy użyciu `st_join`
punkty_sf <- st_make_valid(punkty_sf)
gminy <- st_make_valid(gminy)

punkty_gminy <- st_join(punkty_sf, gminy, join = st_within)

# Sprawdzenie, czy wszystkie `REGON` w `gminy` są jednolite
unique_regon_gminy <- unique(gminy$REGON)
cat("Liczba unikalnych `REGON` w gminy:", length(unique_regon_gminy), "\n")

# Porównanie z `wynik_gminy_df`
unique_regon_wynik <- unique(wynik_gminy_df$REGON)
cat("Liczba unikalnych `REGON` w wynik_gminy_df:", length(unique_regon_wynik), "\n")
Przywrócenie popraw

 Aktualizacja `total_budynkow` na podstawie `wynik_gminy_df`
gminy_z_budynkami <- gminy_z_budynkami %>%
  left_join(wynik_gminy_df, by = "REGON", suffix = c("", "_corrected"))

gminy_z_budynkami$total_budynkow <- ifelse(!is.na(gminy_z_budynkami$total_budynkow_corrected),
                                           gminy_z_budynkami$total_budynkow_corrected,
                                           gminy_z_budynkami$total_budynkow)

punkty_gminy <- st_join(punkty_sf, gminy, join = st_intersects)
