import shinyswatch
import pandas as pd
import numpy as np
from shiny import App, Inputs, Outputs, Session, render, ui, run_app, reactive
from shiny.types import FileInfo
from shiny import experimental as x
import matplotlib.pyplot as plt
from shinywidgets import output_widget, render_widget
from shiny.types import ImgData

from metody_jednoroczne_copy import YearHorizont
yh = YearHorizont()

# JavaScript code to handle cell edits and clicks
js_code = """
$(document).on('click', '#ratios-table-1 td', function() {
    var row = $(this).closest('tr').index();
    var col = $(this).index();
    if ($(this).hasClass('highlighted')) {
        $(this).removeClass('highlighted');
        Shiny.setInputValue('clicked_cell_ratios_table_1', {row: row, col: col - 1, highlighted: false});
    } else {
        $(this).addClass('highlighted');
        Shiny.setInputValue('clicked_cell_ratios_table_1', {row: row, col: col - 1, highlighted: true});
    }
});
"""

js_code_incurred = """
$(document).on('click', '#ratios-table-2 td', function() {
    var row = $(this).closest('tr').index();
    var col = $(this).index();
    if ($(this).hasClass('highlighted')) {
        $(this).removeClass('highlighted');
        Shiny.setInputValue('clicked_cell_ratios_table_2', {row: row, col: col - 1, highlighted: false});
    } else {
        $(this).addClass('highlighted');
        Shiny.setInputValue('clicked_cell_ratios_table_2', {row: row, col: col - 1, highlighted: true});
    }
});
"""

# CSS for highlighted cells
css_code = """
.highlighted {
    background-color: yellow !important;
}
"""

app_ui = ui.page_fluid(
    ui.page_navbar(
        shinyswatch.theme.superhero(),
        ui.nav("Igloo", ui.output_image("image")),
        ui.nav("Wprowadź dane",
               ui.row(
                   ui.column(
                       4,
                       "Dane do rezerw",
                       ui.input_file("file1", "Wprowadź listę trójkątów w Excel", accept=[".xlsx"], multiple=False),
                       ui.input_file("wagi_input", "Wprowadź wagi dla CL", accept=[".xlsx"], multiple=False),
                       ui.input_file("wagi_input_LR", "Wprowadź wagi dla LR", accept=[".xlsx"], multiple=False),
                       ui.input_file("ekspozycja_input", "Wprowadź ekspozycję w Excel", accept=[".xlsx"], multiple=False),
                       ui.input_file("inflacja_input", "Wprowadź inflację w Excel", accept=[".xlsx"], multiple=False),
                       ui.input_switch("potwierdz_inflacje", "Uwzględnij inflację"),
                       ui.input_action_button("go", "Wykonaj obliczenia", class_="btn-success"),
                       x.ui.card(ui.output_text_verbatim("wykonaj_funkcje"))
                   ),
                   ui.column(
                       4,
                       "Wagi P/I",
                       ui.input_file("wagi_p_i_input", "Wprowadź wagi dla P/I", accept=[".xlsx"], multiple=False),
                   ),
               ),

               ),
        ui.nav("Paid Claims", ui.layout_sidebar(
            ui.panel_sidebar(ui.input_selectize("linie_biznesowe_CL_Paid", "Wybierz linię biznesową", choices=['-'], multiple=False),
                             ui.input_numeric("ilosc_okresow", "Ilość okresów", value=0),
                             x.ui.accordion(x.ui.accordion_panel(
                                 "Dopasowanie CL",
                                 ui.input_numeric("x", "Maksymalna wartośc CL", value=3),
                                 ui.input_numeric("Poz_CL", "Pozostawione CL", value=2),
                                 ui.input_numeric("Max_CL", "Maksymalny CL", value=10),
                                 ui.input_numeric("Min_CL", "Minimlany CL", value=1),
                                 ui.input_selectize('chose_CL', 'Wybierz CL do dopasowania krzywej',
                                                    [int(x) for x in range(1, 20)], selected=[1, 2], multiple=True),
                                 ui.input_action_button("accept_CL", "Dopasuj krzywą", class_="btn-success"),
                             ),
                                 x.ui.accordion_panel(
                                     "Dopasowanie wariancji CL",
                                     ui.input_numeric("loss_max_var", "Maksymalna wartośc wariancji", value=100000),
                                     ui.input_numeric("Poz_CL_var", "Pozostawione wariancji", value=2),
                                     ui.input_numeric("Max_var", "Maksymalna wariancja", value=1000000),
                                     ui.input_numeric("Min_var", "Minimlana wariancja", value=0),
                                     ui.input_selectize('chose_var', 'Wybierz wariancje do dopasowania krzywej',
                                                        [int(x) for x in range(1, 20)], selected=[1, 2], multiple=True),
                                     ui.input_action_button("accept_CL_var", "Dopasuj krzywą", class_="btn-success"),
                                 ),
                                 id='id_panel', open=False, multiple=False),
                             width=2, ),
            ui.panel_main(
                ui.navset_tab(
                    ui.nav("Trójkąt",
                           ui.output_table("triangle_table"),
                           ),
                    ui.nav_panel("Współczynniki CL",
                                 ui.div(
                                     ui.output_ui("ratios_table_ui"),
                                     id="panel1"
                                 )
                                 ),

                    ui.nav("Wagi",
                           ui.output_ui("binary_ratios_table_ui")
                           ),
                    ui.nav("Skumulowane CL",
                           x.ui.page_fillable(x.ui.layout_column_wrap(1, x.ui.card(ui.output_data_frame("macierz_wspol_CL_interaktywna"), ),
                                                                      height=180)),
                           x.ui.page_fillable(x.ui.layout_column_wrap(1, x.ui.card(
                               ui.output_data_frame("wspol_z_krzywej_CL_paid_interaktywna"), ), height=180)),
                           x.ui.layout_column_wrap(
                               1,
                               x.ui.card(
                                   ui.output_plot("plot_wspolczynniki_dopasowane_interaktywny"),
                               ),
                               height=400),
                           ),
                    ui.nav("Wizualizacja i wyniki",
                           x.ui.page_fillable(x.ui.layout_column_wrap(1, x.ui.card(
                               ui.output_data_frame("Ult_BE_data_interaktywne"), ), height=400)),

                           ),

                ),
                ui.tags.style(css_code),
                ui.tags.script(js_code)
            )

        )),

        ui.nav("Incurred Claims",
               ui.layout_sidebar(
                   ui.panel_sidebar(
                       ui.input_selectize("linie_biznesowe_CL_incurred", "Wybierz linię biznesową", choices=['-'], multiple=False),
                       ui.input_numeric("ilosc_okresow_incurred", "Ilość okresów", value=0),
                       x.ui.accordion(x.ui.accordion_panel(
                           "Dopasowanie CL",
                           ui.input_numeric("x_incurred", "Maksymalna wartośc CL", value=3),
                           ui.input_numeric("Poz_CL_incurred", "Pozostawione CL", value=2),
                           ui.input_numeric("Max_CL_incurred", "Maksymalny CL", value=10),
                           ui.input_numeric("Min_CL_incurred", "Minimlany CL", value=1),
                           ui.input_selectize('chose_CL', 'Wybierz CL do dopasowania krzywej',
                                              [int(x) for x in range(1, 20)], selected=[1, 2], multiple=True),
                           ui.input_action_button("accept_CL_incurred", "Dopasuj krzywą", class_="btn-success"),
                       ),
                           x.ui.accordion_panel(
                               "Dopasowanie wariancji CL",
                               ui.input_numeric("loss_max_var_incurred", "Maksymalna wartośc wariancji", value=100000),
                               ui.input_numeric("Poz_CL_var_incurred", "Pozostawione wariancji", value=2),
                               ui.input_numeric("Max_var_incurred", "Maksymalna wariancja", value=1000000),
                               ui.input_numeric("Min_var_incurred", "Minimlana wariancja", value=0),
                               ui.input_selectize('chose_var', 'Wybierz wariancje do dopasowania krzywej',
                                                  [int(x) for x in range(1, 20)], selected=[1, 2], multiple=True),
                               ui.input_action_button("accept_CL_var_incurred", "Dopasuj krzywą", class_="btn-success"),
                           ),
                           id='id_panel', open=False, multiple=False),
                       width=2, ),
                   ui.panel_main(
                       ui.navset_tab(
                           ui.nav("Trójkąt",
                                  ui.output_table("triangle_table_incurred"),
                                  ),
                           ui.nav("Współczynniki CL",
                                  ui.div(
                                      ui.output_ui("ratios_table_ui_incurred"),
                                      id="panel2"
                                  )
                                  ),

                           ui.nav("Wagi",
                                  ui.output_ui("binary_ratios_table_ui_incurred")
                                  ),
                           ui.nav("Skumulowane CL",
                                  x.ui.page_fillable(x.ui.layout_column_wrap(1, x.ui.card(ui.output_data_frame("macierz_wspol_CL_interaktywna_incurred"), ),
                                                                             height=180)),
                                  x.ui.page_fillable(x.ui.layout_column_wrap(1, x.ui.card(
                                      ui.output_data_frame("wspol_z_krzywej_CL_paid_interaktywna_incurred"), ), height=180)),
                                  x.ui.layout_column_wrap(
                                      1,
                                      x.ui.card(
                                          ui.output_plot("plot_wspolczynniki_dopasowane_interaktywny_incurred"),
                                      ),
                                      height=400),

                                  ),
                       ),
                       ui.tags.style(css_code),
                       ui.tags.script(js_code_incurred)
                   )

               ),
               ),

        title="",
    ),

)


def server(input: Inputs, output: Outputs, session: Session):
    clicked_cells1 = reactive.Value([])
    clicked_cells2 = reactive.Value([])
    update_trigger1 = reactive.Value(0)
    update_trigger2 = reactive.Value(0)

    @reactive.Calc
    def triangle_paid():
        data = {
            "AY": [1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990],
            1: [5012, 106, 3410, 5655, 1092, 1513, 557, 1351, 3133, 2063],
            2: [8269, 4285, 8992, 11555, 9565, 6445, 4020, 6947, 5395, None],
            3: [10907, 5396, 13873, 15766, 15836, 11702, 10946, 13112, None, None],
            4: [11805, 10666, 16141, 21266, 22169, 12935, 12314, None, None, None],
            5: [13539, 13782, 18735, 23425, 25955, 15852, None, None, None, None],
            6: [16181, 15599, 22214, 26083, 26180, None, None, None, None, None],
            7: [18009, 15496, 22863, 27067, None, None, None, None, None, None],
            8: [18608, 16169, 23466, None, None, None, None, None, None, None],
            9: [18662, 16704, None, None, None, None, None, None, None, None],
            10: [18834, None, None, None, None, None, None, None, None, None]
        }
        df = pd.DataFrame(data)
        return df

    @reactive.Calc
    def triangle_incurred():
        data = {
            "AY": [1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990],
            1: [100, 106, 110, 5655, 1092, 1513, 557, 1351, 3133, 2063],
            2: [8269, 4285, 8992, 11555, 9565, 6445, 4020, 6947, 5395, None],
            3: [10907, 5396, 13873, 15766, 15836, 11702, 10946, 13112, None, None],
            4: [11805, 10666, 16141, 21266, 22169, 12935, 12314, None, None, None],
            5: [13539, 13782, 18735, 23425, 25955, 15852, None, None, None, None],
            6: [16181, 15599, 22214, 26083, 26180, None, None, None, None, None],
            7: [18009, 15496, 22863, 27067, None, None, None, None, None, None],
            8: [18608, 16169, 23466, None, None, None, None, None, None, None],
            9: [18662, 16704, None, None, None, None, None, None, None, None],
            10: [18834, None, None, None, None, None, None, None, None, None]
        }
        df = pd.DataFrame(data)
        return df

    @reactive.Calc
    def ratio_df():
        df_input = triangle_paid()
        ratio_df_pd = yh.calculate_ratios(df_input)
        return ratio_df_pd

    @reactive.Calc
    def ratio_df_incurred():
        df_input = triangle_incurred()
        ratio_df_pd = yh.calculate_ratios(df_input)
        return ratio_df_pd

    @reactive.Calc
    def binary_df():
        ratio_df_pd = ratio_df()
        binary_df = yh.create_binary_df(ratio_df_pd)
        return binary_df

    @reactive.Calc
    def binary_df_incurred():
        ratio_df_pd = ratio_df_incurred()
        binary_df = yh.create_binary_df(ratio_df_pd)
        return binary_df

    @output
    @render.ui
    def ratios_table_ui():
        df_ratio_out = ratio_df()
        return ui.HTML(df_ratio_out.to_html(classes='table table-striped table-hover', table_id="ratios-table-1"))

    @output
    @render.ui
    def ratios_table_ui_incurred():
        df_ratio_out = ratio_df_incurred()
        return ui.HTML(df_ratio_out.to_html(classes='table table-striped table-hover', table_id="ratios-table-2"))

    @output
    @render.ui
    def binary_ratios_table_ui():
        update_trigger1.get()
        df = binary_df()
        return ui.HTML(df.to_html(classes='table table-striped table-hover', table_id="binary-ratios-table-1", na_rep='NaN', float_format='{:.0f}'.format))

    @output
    @render.ui
    def binary_ratios_table_ui_incurred():
        update_trigger2.get()
        df = binary_df_incurred()
        return ui.HTML(df.to_html(classes='table table-striped table-hover', table_id="binary-ratios-table-2", na_rep='NaN', float_format='{:.0f}'.format))

    @reactive.Effect
    @reactive.event(input.clicked_cell_ratios_table_1)
    def update_clicked_cell1():
        cell = input.clicked_cell_ratios_table_1()
        df = binary_df()
        if cell:
            row, col, highlighted = cell['row'], cell['col'], cell['highlighted']
            current_cells = clicked_cells1.get()
            if highlighted:
                if (row, col) not in current_cells:
                    current_cells.append((row, col))
                    df.iat[row, col] = 0
            else:
                if (row, col) in current_cells:
                    current_cells.remove((row, col))
                    df.iat[row, col] = 1
            clicked_cells1.set(current_cells)
            update_trigger1.set(update_trigger1.get() + 1)  # Trigger re-render

    @reactive.Effect
    @reactive.event(input.clicked_cell_ratios_table_2)
    def update_clicked_cell2():
        cell = input.clicked_cell_ratios_table_2()
        df = binary_df_incurred()
        if cell:
            row, col, highlighted = cell['row'], cell['col'], cell['highlighted']
            current_cells = clicked_cells2.get()
            if highlighted:
                if (row, col) not in current_cells:
                    current_cells.append((row, col))
                    df.iat[row, col] = 0
            else:
                if (row, col) in current_cells:
                    current_cells.remove((row, col))
                    df.iat[row, col] = 1
            clicked_cells2.set(current_cells)
            update_trigger2.set(update_trigger2.get() + 1)  # Trigger re-render

    @output
    @render.image
    def image():
        from pathlib import Path
        dir = Path(__file__).resolve().parent
        img: ImgData = {"src": str(dir / "Model Ryzyka Rezerw.png"), "width": "1600px", "height": "900px"}
        return img

    # WEJSCIE
    @reactive.Calc
    def Upload_data():
        if input.file1() is None:
            return "Wprowadź dane"
        f: list[FileInfo] = input.file1()
        xl = pd.ExcelFile(f[0]["datapath"])
        sheet_names = xl.sheet_names
        return [xl, sheet_names]

    # Aktualizacja zakładek
    @reactive.Effect
    def _():
        if input.file1() is None:
            ui.update_selectize(
                "zakladka",
                choices=['-'],
                server=True,
            )
        else:
            x = Upload_data()[1]
            ui.update_selectize(
                "zakladka",
                choices=x,
                server=False,
            )

    # ... (Rest of your server functions for calculations and rendering)

app = App(app_ui, server)
run_app(app)
