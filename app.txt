import pandas as pd
import numpy as np
from shiny import App, ui, render, reactive, Inputs, Outputs, Session
import matplotlib.pyplot as plt

# Dane
data = {
    "AY": [1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990],
    1: [5012, 106, 3410, 5655, 1092, 1513, 557, 1351, 3133, 2063],
    2: [8269, 4285, 8992, 11555, 9565, 6445, 4020, 6947, 5395, None],
    3: [19007, 5396, 13873, 15766, 15836, 11702, 10946, 13112, None, None],
    4: [11805, 10666, 16141, 21266, 22169, 12935, 12314, None, None, None],
    5: [13539, 13782, 18735, 23425, 25955, 15852, None, None, None, None],
    6: [16181, 15599, 22214, 26083, 26180, None, None, None, None, None],
    7: [18009, 15496, 22863, None, None, None, None, None, None, None],
    8: [18608, 16169, 23466, None, None, None, None, None, None, None],
    9: [18662, 16704, None, None, None, None, None, None, None, None],
    10: [18834, None, None, None, None, None, None, None, None, None]
}

df = pd.DataFrame(data)

# Obliczenie ilorazów
def calculate_ratios(df):
    ratio_df = pd.DataFrame()
    for i in range(1, df.shape[1] - 1):
        ratio_col = df.iloc[:, i + 1] / df.iloc[:, i]
        ratio_df[f'Ratio_{i + 1}/{i}'] = ratio_col
    return ratio_df

# Funkcja do tworzenia DataFrame wypełnionego 1 i NaN
def create_binary_df(ratio_df):
    binary_df = ratio_df.applymap(lambda x: 1 if pd.notna(x) else np.nan)
    return binary_df

ratio_df1 = calculate_ratios(df)
binary_df1 = create_binary_df(ratio_df1)

ratio_df2 = calculate_ratios(df)
binary_df2 = create_binary_df(ratio_df2)

# JavaScript code to handle cell edits and clicks
js_code = """
$(document).on('click', 'td', function() {
    var tab_id = $(this).closest('.tab-pane').attr('id');
    var row = $(this).closest('tr').index();
    var col = $(this).index();
    if ($(this).hasClass('highlighted')) {
        $(this).removeClass('highlighted');
        Shiny.setInputValue(tab_id + '_clicked_cell', {row: row, col: col - 1, highlighted: false});
    } else {
        $(this).addClass('highlighted');
        Shiny.setInputValue(tab_id + '_clicked_cell', {row: row, col: col - 1, highlighted: true});
    }
});
"""

# CSS for highlighted cells
css_code = """
.highlighted {
    background-color: yellow !important;
}
"""

# Definiowanie interfejsu użytkownika
app_ui = ui.page_fluid(
    ui.navset_tab(
        ui.nav_panel("Histogram",
            ui.input_slider("n", "Number of bins", min=5, max=50, value=30),
            ui.output_plot("plot")
        ),
        ui.nav_panel("Trójkąt",
            ui.input_slider("height", "Height of the triangle", min=1, max=20, value=5),
            ui.output_text("triangle"),
            ui.output_table("triangle_table")
        ),
        ui.nav_panel("Paid Claims",
            ui.div(id="panel1",
                ui.output_ui("ratios_table_ui1"),
                ui.output_ui("binary_ratios_table_ui1")
            )
        ),
        ui.nav_panel("Incurred Claims",
            ui.div(id="panel2",
                ui.output_ui("ratios_table_ui2"),
                ui.output_ui("binary_ratios_table_ui2")
            )
        )
    ),
    ui.tags.style(css_code),
    ui.tags.script(js_code)
)

# Definiowanie funkcji serwera
def server(input: Inputs, output: Outputs, session: Session):
    clicked_cells1 = reactive.Value([])
    clicked_cells2 = reactive.Value([])
    update_trigger1 = reactive.Value(0)
    update_trigger2 = reactive.Value(0)

    @output
    @render.plot
    def plot():
        x = np.random.randn(1000)
        bins = np.linspace(min(x), max(x), input.n() + 1)
        plt.hist(x, bins=bins)
        return plt.gcf()

    @output
    @render.text
    def triangle():
        height = input.height()
        return '\n'.join(' ' * (height - i - 1) + '*' * (2 * i + 1) for i in range(height))

    @output
    @render.table
    def triangle_table():
        return df

    @output
    @render.ui
    def ratios_table_ui1():
        return ui.HTML(ratio_df1.to_html(classes='table table-striped table-hover', table_id="ratios-table1"))

    @output
    @render.ui
    def binary_ratios_table_ui1():
        # Ensure this function reacts to changes in clicked_cells1
        update_trigger1.get()
        return ui.HTML(binary_df1.to_html(classes='table table-striped table-hover', table_id="binary-ratios-table1", na_rep='NaN', float_format='{:.0f}'.format))

    @reactive.Effect
    @reactive.event(input.panel1_clicked_cell)
    def update_clicked_cell1():
        cell = input.panel1_clicked_cell()
        if cell:
            row, col, highlighted = cell['row'], cell['col'], cell['highlighted']
            current_cells = clicked_cells1.get()
            if highlighted:
                if (row, col) not in current_cells:
                    current_cells.append((row, col))
                    binary_df1.iat[row, col] = 0  # Update the value to 0
            else:
                if (row, col) in current_cells:
                    current_cells.remove((row, col))
                    binary_df1.iat[row, col] = 1  # Update the value to 1
            clicked_cells1.set(current_cells)
            update_trigger1.set(update_trigger1.get() + 1)  # Trigger re-render

    @output
    @render.ui
    def ratios_table_ui2():
        return ui.HTML(ratio_df2.to_html(classes='table table-striped table-hover', table_id="ratios-table2"))

    @output
    @render.ui
    def binary_ratios_table_ui2():
        # Ensure this function reacts to changes in clicked_cells2
        update_trigger2.get()
        return ui.HTML(binary_df2.to_html(classes='table table-striped table-hover', table_id="binary-ratios-table2", na_rep='NaN', float_format='{:.0f}'.format))

    @reactive.Effect
    @reactive.event(input.panel2_clicked_cell)
    def update_clicked_cell2():
        cell = input.panel2_clicked_cell()
        if cell:
            row, col, highlighted = cell['row'], cell['col'], cell['highlighted']
            current_cells = clicked_cells2.get()
            if highlighted:
                if (row, col) not in current_cells:
                    current_cells.append((row, col))
                    binary_df2.iat[row, col] = 0  # Update the value to 0
            else:
                if (row, col) in current_cells:
                    current_cells.remove((row, col))
                    binary_df2.iat[row, col] = 1  # Update the value to 1
            clicked_cells2.set(current_cells)
            update_trigger2.set(update_trigger2.get() + 1)  # Trigger re-render

# Tworzenie aplikacji
app = App(app_ui, server)

if __name__ == "__main__":
    app.run()
