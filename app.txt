library(sf)
library(classInt)
library(RColorBrewer)

# Przekształcenie wartości 0 na 0.1, aby uniknąć problemów z logarytmiczną transformacją
df_joined$ilosc[df_joined$ilosc == 0] <- 0.1

# Ustalanie wartości minimalnej i maksymalnej
minimal_value <- 1
max_value <- max(df_joined$ilosc, na.rm = TRUE)

# Dynamiczne przedziały: równy rozstęp (max_value / 10)
break_interval <- max_value / 10
breaks <- seq(minimal_value, max_value - break_interval, by = break_interval)

# Dodanie przedziałów [0, 1) oraz maksymalnej wartości, aby zamknąć przedział
breaks <- c(0, 1, breaks, max_value)
breaks <- unique(breaks)

# Tworzenie etykiet dla przedziałów
labels <- c("[0, 1)", sprintf("[%.1f, %.1f)", breaks[-c(1, length(breaks))], breaks[-c(1, 2)]))

# Modyfikacja ostatniej etykiety, aby była w formie zamkniętej [ostatnia wartość, max_value]
labels[length(labels)] <- sprintf("[%.1f, %.1f]", breaks[length(breaks) - 1], max_value)

# Przypisanie kategorii do danych z uwzględnieniem przedziałów
df_joined$ilosc_category <- cut(
  df_joined$ilosc,
  breaks = breaks,
  include.lowest = TRUE,
  labels = labels,
  right = TRUE  # Ostatni przedział zamknięty, aby obejmował wartość maksymalną
)

# Tworzenie specjalnej kategorii dla gmin z wartościami [0, 1) oraz gmin z NA
df_joined$ilosc_category[is.na(df_joined$ilosc)] <- "Brak danych"  # Kategorie dla gmin bez wartości
df_joined$ilosc_category[df_joined$ilosc_category == "[0, 1)"] <- "Brak danych"  # Kategorie dla gmin z przedziałem [0, 1)

# Usunięcie pustych kategorii za pomocą droplevels()
df_joined$ilosc_category <- droplevels(df_joined$ilosc_category)

# Sprawdzenie aktualnych poziomów kategorii (po usunięciu pustych)
print("Aktualne poziomy kategorii po usunięciu pustych:")
print(levels(df_joined$ilosc_category))

# Sprawdzenie przypisania kategorii i liczby obserwacji
print("Liczba obserwacji w każdej kategorii po usunięciu pustych kategorii:")
print(table(df_joined$ilosc_category, useNA = "ifany"))

# Tworzenie bardziej zróżnicowanej palety kolorów
palette_name <- "RdYlBu"  # Użyj bardziej kontrastowej palety, np. "RdYlBu"
grad_colors <- rev(brewer.pal(n = length(levels(df_joined$ilosc_category)) - 1, palette_name))  # Pomijamy kategorię "Brak danych"

# Dodanie koloru szarego dla kategorii "Brak danych"
colors_to_use <- c("lightgray", grad_colors)  # "lightgray" dla brakujących wartości, pozostałe kolory dla przedziałów >= 1

# Tworzenie palety kolorów na podstawie aktualnych kategorii `ilosc_category`
pal <- setNames(colors_to_use, levels(df_joined$ilosc_category))

# Wyświetlenie przypisania kolorów do kategorii w celu weryfikacji
print("Przypisanie kolorów do istniejących kategorii:")
print(pal)

# Sprawdzenie, czy gminy z maksymalną wartością są poprawnie przypisane po filtracji
max_value_clean <- max(df_joined$ilosc, na.rm = TRUE)
print("Gminy z maksymalną wartością po przypisaniu kategorii:")
print(df_joined[df_joined$ilosc == max_value_clean, c("ilosc", "ilosc_category")])

# Tworzenie pliku graficznego PNG i zapis w bieżącym katalogu roboczym
png(filename = "mapa_gmin_statyczna_szare_gminy_brak_danych.png", width = 10, height = 8, units = "in", res = 300)

# Rysowanie mapy z przypisaniem kolorów do kategorii
plot(
  df_joined_simplified["ilosc_category"],
  col = pal[df_joined_simplified$ilosc_category],  # Przypisanie kolorów bezpośrednio do kategorii
  main = "Mapa gmin z wyróżnionymi gminami bez danych i przedziałem [0, 1)",
  key.pos = NULL  # Wyłączenie wbudowanej legendy
)

# Dodanie legendy z kolorem szarym dla gmin z brakującymi wartościami oraz pozostałymi przedziałami
legend("topright",
       legend = levels(df_joined$ilosc_category),  # Legendy dla wszystkich kategorii
       fill = colors_to_use,  # Kolory z uwzględnieniem "lightgray" dla brakujących danych
       title = "Liczba budynków",
       cex = 0.8,
       bg = "white",
       bty = "n")

# Zakończenie zapisywania do pliku
dev.off()
