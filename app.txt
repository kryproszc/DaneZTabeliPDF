import math
import numpy as np

class PCG32:
    def __init__(self, seed=None):
        self.state = seed if seed is not None else 0x853c49e6748fea9b
        self.inc = 0xda3e39cb94b95bdb

    def random(self):
        oldstate = self.state
        self.state = oldstate * 6364136223846793005 + (self.inc | 1)
        xorshifted = (((oldstate >> 18) ^ oldstate) >> 27) & 0xFFFFFFFF
        rot = (oldstate >> 59) & 0xFFFFFFFF
        return (xorshifted >> rot) | (xorshifted << ((-rot) & 31)) & 0xFFFFFFFF

    def random_float(self, size=1):
        return np.array([self.random() / 0xFFFFFFFF for _ in range(size)], dtype=np.float32)

    def normal(self, mean, sigma, size=1):
        u1 = self.random_float(size)
        u1 = np.clip(u1, np.finfo(float).eps, 1 - np.finfo(float).eps)  # Zapewnij, że u1 nigdy nie będzie 0 ani 1
        u2 = self.random_float(size)
        z0 = np.sqrt(-2.0 * np.log(u1)) * np.cos(2.0 * np.pi * u2)
        return mean + z0 * sigma

    def lognormal(self, mean, sigma, size=1):
        normal_values = self.normal(mean, sigma, size)
        return np.exp(normal_values)

    def chisquare(self, df, size=1):
        normal_samples = self.normal(0, 1, size * df)
        normal_samples = normal_samples.reshape(size, df)
        return np.sum(normal_samples ** 2, axis=1)
