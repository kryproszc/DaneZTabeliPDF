echo '(Get-NetIPAddress -InterfaceAlias "VEthernet (WSL)" | select -last 1).IPAddress' |powershell.exe -NoProfile -NoLogo | grep 192 | tr -d '\r' | read gateway; sudo ifconfig eth0 netmask 255.255.240.0; sudo ip route add default via $gateway; echo "Set gateway to $gateway"


$guest_ip = bash -c "ip a show eth0 | egrep -o 'inet [0-9.]+' | cut -d ' ' -f2"
Write-Output "Guest IP IS: $guest_ip"
$gateway_ips = Get-NetIPAddress -InterfaceAlias "vEthernet (WSL)" | select IPAddress
$gateway_ip = $gateway_ips[1].IPAddress
Write-Output "Gateway (local WSL adapter) IP is: $gateway_ip"
bash -c "sudo ip a add 192.168.0.1/255.255.240.0 dev eth0"
bash -c "sudo ip route add default via $gateway_ip"

siec.ps1
$guest_ip = bash -c "ip a show eth0 | egrep -o 'inet [0-9.]+' | cut -d ' ' -f2"
Write-Output "Guest IP IS: $guest_ip"
$gateway_ips = Get-NetIPAddress -InterfaceAlias "vEthernet (WSL)" | select IPAddress
$gateway_ip = $gateway_ips[1].IPAddress
Write-Output "Gateway (local WSL adapter) IP is: $gateway_ip"
bash -c "sudo ip a add 192.168.0.1/255.255.240.0 dev eth0"
bash -c "sudo ip route add default via $gateway_ip"


$guest_ip = bash -c "ip a show eth0 | egrep -o 'inet [0-9.]+' | cut -d ' ' -f2"
Write-Output "Guest IP IS: $guest_ip"
$gateway_ips = Get-NetIPAddress -InterfaceAlias "vEthernet (WSL)" | select IPAddress
$gateway_ip = $gateway_ips[1].IPAddress
Write-Output "Gateway (local WSL adapter) IP is: $gateway_ip"
bash -c "sudo ip a add 192.168.0.1/255.255.240.0 dev eth0"
bash -c "sudo ip route add default via $gateway_ip"




przekatne <- c(5:34)
Ultimate <- rnorm(30, 444, 22)
podane <- 456

# Tworzenie wykresu
plot(przekatne, Ultimate, main="Wykres przekatne vs Ultimate", xlab="Przekatne", ylab="Ultimate", pch=19, col="blue")

# Dodanie poziomej linii
abline(h=podane, col="red", lwd=2, lty=2)

# Opcjonalnie, dodanie legendy
legend("topright", legend=c("Ultimate", "Podane"), col=c("blue", "red"), pch=c(19, NA), lty=c(NA, 2), lwd=c(1, 2))






set.seed(123)
wektory <- replicate(28, runif(34, min=8, max=10), simplify=FALSE)

# Funkcja do sprawdzania, gdzie wartości rosną
find_increasing_indices <- function(vec) {
  which(diff(vec) > 0)
}

# Zastosowanie funkcji do każdego wektora
increasing_indices <- lapply(wektory, find_increasing_indices)

# Nadanie nazw wektorom
names(increasing_indices) <- paste0("Vector_", 1:28)

# Znajdź maksymalną długość wektora
max_length <- max(sapply(increasing_indices, length))

# Funkcja do uzupełniania wektorów NA
pad_vector <- function(vec, length_out) {
  c(vec, rep(NA, length_out - length(vec)))
}

# Uzupełnianie wektorów
padded_indices <- lapply(increasing_indices, pad_vector, length_out = max_length)

# Konwersja do dataframe
df <- as.data.frame(padded_indices)

# Wyświetlenie dataframe
print(df)

# Tworzenie pustej dataframe z kolumnami ponumerowanymi od 5 do 34
column_names <- as.character(5:34)
empty_df <- data.frame(matrix(ncol=length(column_names), nrow=34))

# Nadanie nazw kolumnom
colnames(empty_df) <- column_names

# Wyświetlenie pustej dataframe
print(empty_df)


create_plot <- function(data_vector, input_values, title) {
  quantiles <- c(0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99)
  quantile_values <- quantile(data_vector, probs = quantiles)
  df <- data.frame(Quantiles = quantiles, Values = quantile_values)
  input_quantiles <- sapply(input_values, function(value) ecdf(data_vector)(value))
  plot <- ggplot(df, aes(x = Quantiles, y = Values)) +
    geom_line(aes(color = "Bootstrap"), size = 1.2) +
    geom_point(aes(color = "Bootstrap"), size = 3) +
    geom_vline(aes(xintercept = input_quantiles["PZU"], color = "PZU"), linetype = "dashed", size = 1) +
    geom_vline(aes(xintercept = input_quantiles["Pięć przek."], color = "Pięć przek."), linetype = "dashed", size = 1) +
    geom_vline(aes(xintercept = input_quantiles["Wszystkie przek."], color = "Wszystkie przek."), linetype = "dashed", size = 1) +
    scale_x_continuous(breaks = quantiles) +
    scale_color_manual(name = "Legenda", values = c("Bootstrap" = "blue", "PZU" = "green", "Pięć przek." = "orange", "Wszystkie przek." = "purple")) +
    labs(
      x = "Kwantyle",
      y = "Wartości kwantyli") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
          plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
          axis.title = element_text(size = 12, face = "bold"),
          legend.position = "top")
  return(plot)

}


library(ggplot2)

create_plot <- function(data_vector, input_values, input_legend, title) {
  # Definiowanie kwantyli
  quantiles <- c(0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99)
  quantile_values <- quantile(data_vector, probs = quantiles)
  df <- data.frame(Quantiles = quantiles, Values = quantile_values)
  
  # Obliczanie kwantyli dla wartości wejściowych
  input_quantiles <- sapply(input_values, function(value) ecdf(data_vector)(value))
  
  # Tworzenie dataframe dla linii pionowych
  line_df <- data.frame(Quantiles = input_quantiles, Labels = as.factor(input_legend))
  
  # Tworzenie podstawowego wykresu
  plot <- ggplot(df, aes(x = Quantiles, y = Values)) +
    geom_line(aes(color = "Bootstrap"), size = 1.2) +
    geom_point(aes(color = "Bootstrap"), size = 3) +
    scale_x_continuous(breaks = quantiles) +
    scale_color_manual(name = "Legenda", values = c("Bootstrap" = "blue")) +
    labs(
      x = "Kwantyle",
      y = "Wartości kwantyli",
      title = title
    ) +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
      plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
      axis.title = element_text(size = 12, face = "bold"),
      legend.position = "right"
    )
  
  # Dodanie linii pionowych dla każdej wartości wejściowej
  plot <- plot + geom_vline(data = line_df, aes(xintercept = Quantiles, color = Labels), linetype = "dashed", size = 1)
  
  # Dodanie dynamicznej legendy
  line_colors <- scales::hue_pal()(length(input_values))
  legend_labels <- setNames(line_colors, as.character(input_legend))
  plot <- plot + scale_color_manual(name = "Legenda", values = c("Bootstrap" = "blue", legend_labels))
  
  return(plot)
}

# Przykład użycia funkcji
set.seed(123)
data_vector <- rnorm(10000, mean = 100, sd = 15)
input_values <- c(90, 105, 110, 120) # Przykładowe wartości wejściowe
input_legend <- c(1, 2, 3, 4) # Przykładowe wartości do legendy
title <- "Wykres Kwantyli z Pionowymi Liniami"

plot <- create_plot(data_vector, input_values, input_legend, title)
print(plot)

