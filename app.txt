import os
import csv
import concurrent.futures
from geopy.geocoders import Nominatim

# Funkcja do geokodowania adresu
def geocode_address(address):
    geolocator = Nominatim(user_agent="geocoding_app")
    location = geolocator.geocode(address)
    if location:
        return location.latitude, location.longitude
    else:
        return None, None

# Funkcja do przetwarzania pojedynczego pliku CSV
def process_csv_file(input_file, output_folder):
    filename = os.path.basename(input_file)
    output_file = os.path.join(output_folder, filename)

    with open(input_file, 'r', encoding='utf-8') as csv_input:
        csv_reader = csv.DictReader(csv_input)
        fieldnames = csv_reader.fieldnames + ['Latitude', 'Longitude']

        with open(output_file, 'w', newline='', encoding='utf-8') as csv_output:
            csv_writer = csv.DictWriter(csv_output, fieldnames=fieldnames)
            csv_writer.writeheader()

            # Obliczanie połowy dostępnych wątków
            max_threads = int(concurrent.futures.thread._threads_queues._maxsize / 2)

            # Geokodowanie adresów równolegle z połową wątków
            with concurrent.futures.ThreadPoolExecutor(max_workers=max_threads) as executor:
                future_to_row = {executor.submit(geocode_address, row['Address']): row for row in csv_reader}
                for future in concurrent.futures.as_completed(future_to_row):
                    row = future_to_row[future]
                    latitude, longitude = future.result()
                    row['Latitude'] = latitude
                    row['Longitude'] = longitude
                    csv_writer.writerow(row)

# Główna funkcja
def main():
    input_folder = 'Przed_Geokodowaniem'
    output_folder = 'Po_Geokodowaniu'

    # Upewnienie się, że folder wyjściowy istnieje
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Przetwarzanie każdego pliku CSV w folderze wejściowym
    for filename in os.listdir(input_folder):
        if filename.endswith('.csv'):
            input_file = os.path.join(input_folder, filename)
            process_csv_file(input_file, output_folder)
            print(f'Przetworzono plik: {filename}')

if __name__ == "__main__":
    main()