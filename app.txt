import pandas as pd
import numpy as np
from shiny import App, ui, render, reactive, Inputs, Outputs, Session
import matplotlib.pyplot as plt

# Dane
def triangle_paid():
    data = {
        "AY": [1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990],
        1: [5012, 106, 3410, 5655, 1092, 1513, 557, 1351, 3133, 2063],
        2: [8269, 4285, 8992, 11555, 9565, 6445, 4020, 6947, 5395, None],
        3: [19007, 5396, 13873, 15766, 15836, 11702, 10946, 13112, None, None],
        4: [11805, 10666, 16141, 21266, 22169, 12935, 12314, None, None, None],
        5: [13539, 13782, 18735, 23425, 25955, 15852, None, None, None, None],
        6: [16181, 15599, 22214, 26083, 26180, None, None, None, None, None],
        7: [18009, 15496, 22863, None, None, None, None, None, None, None],
        8: [18608, 16169, 23466, None, None, None, None, None, None, None],
        9: [18662, 16704, None, None, None, None, None, None, None, None],
        10: [18834, None, None, None, None, None, None, None, None, None]
    }
    df = pd.DataFrame(data)
    return df

def triangle_incurred():
    data = {
        "AY": [1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990],
        1: [100, 106, 110, 5655, 1092, 1513, 557, 1351, 3133, 2063],
        2: [8269, 4285, 8992, 11555, 9565, 6445, 4020, 6947, 5395, None],
        3: [10907, 5396, 13873, 15766, 15836, 11702, 10946, 13112, None, None],
        4: [11805, 10666, 16141, 21266, 22169, 12935, 12314, None, None, None],
        5: [13539, 13782, 18735, 23425, 25955, 15852, None, None, None, None],
        6: [16181, 15599, 22214, 26083, 26180, None, None, None, None, None],
        7: [18009, 15496, 22863, 27067, None, None, None, None, None, None],
        8: [18608, 16169, 23466, None, None, None, None, None, None, None],
        9: [18662, 16704, None, None, None, None, None, None, None, None],
        10: [18834, None, None, None, None, None, None, None, None, None]
    }
    df = pd.DataFrame(data)
    return df

# Obliczenie ilorazów
def calculate_ratios(df):
    ratio_df = pd.DataFrame()
    for i in range(1, df.shape[1] - 1):
        ratio_col = df.iloc[:, i + 1] / df.iloc[:, i]
        ratio_df[f'Ratio_{i + 1}/{i}'] = ratio_col
    return ratio_df

# Funkcja do tworzenia DataFrame wypełnionego 1 i NaN
def create_binary_df(ratio_df):
    binary_df = ratio_df.applymap(lambda x: 1 if pd.notna(x) else np.nan)
    return binary_df

# JavaScript code to handle cell edits and clicks
js_code_p = """
$(document).on('click', '#ratios-table-1 td', function() {
    var row = $(this).closest('tr').index();
    var col = $(this).index();
    if ($(this).hasClass('highlighted')) {
        $(this).removeClass('highlighted');
        Shiny.setInputValue('clicked_cell_ratios_table_1', {row: row, col: col - 1, highlighted: false});
    } else {
        $(this).addClass('highlighted');
        Shiny.setInputValue('clicked_cell_ratios_table_1', {row: row, col: col - 1, highlighted: true});
    }
});
"""

js_code_i = """
$(document).on('click', '#ratios-table-2 td', function() {
    var row = $(this).closest('tr').index();
    var col = $(this).index();
    if ($(this).hasClass('highlighted')) {
        $(this).removeClass('highlighted');
        Shiny.setInputValue('clicked_cell_ratios_table_2', {row: row, col: col - 1, highlighted: false});
    } else {
        $(this).addClass('highlighted');
        Shiny.setInputValue('clicked_cell_ratios_table_2', {row: row, col: col - 1, highlighted: true});
    }
});
"""

# CSS for highlighted cells
css_code = """
.highlighted {
    background-color: yellow !important;
}
"""

# Definiowanie interfejsu użytkownika
app_ui = ui.page_fluid(
    ui.navset_tab(
        ui.nav("P",
            ui.navset_tab(
                ui.nav_panel("Trójkąt",
                    ui.input_slider("height_p", "Height of the triangle", min=1, max=20, value=5),
                    ui.output_text("triangle_p"),
                    ui.output_table("triangle_table_p")
                ),
                ui.nav_panel("Ilorazy",
                    ui.output_ui("ratios_table_ui_p")
                ),
                ui.nav_panel("Binary Ilorazy",
                    ui.output_ui("binary_ratios_table_ui_p")
                )
            ),
            ui.tags.style(css_code),
            ui.tags.script(js_code_p)
        ),
        ui.nav("I",
            ui.navset_tab(
                ui.nav_panel("Trójkąt",
                    ui.input_slider("height_i", "Height of the triangle", min=1, max=20, value=5),
                    ui.output_text("triangle_i"),
                    ui.output_table("triangle_table_i")
                ),
                ui.nav_panel("Ilorazy",
                    ui.output_ui("ratios_table_ui_i")
                ),
                ui.nav_panel("Binary Ilorazy",
                    ui.output_ui("binary_ratios_table_ui_i")
                )
            ),
            ui.tags.style(css_code),
            ui.tags.script(js_code_i)
        )
    )
)

# Definiowanie funkcji serwera
def server(input: Inputs, output: Outputs, session: Session):
    # Zakładka P
    clicked_cells_p = reactive.Value([])
    update_trigger_p = reactive.Value(0)

    ratio_df_p = calculate_ratios(triangle_paid())
    binary_df_p = create_binary_df(ratio_df_p)

    @output
    @render.text
    def triangle_p():
        height = input.height_p()
        return '\n'.join(' ' * (height - i - 1) + '*' * (2 * i + 1) for i in range(height))

    @output
    @render.table
    def triangle_table_p():
        print("Rendering triangle table for P")
        return triangle_paid()

    @output
    @render.ui
    def ratios_table_ui_p():
        print("Rendering ratios table for P")
        return ui.HTML(ratio_df_p.to_html(classes='table table-striped table-hover', table_id="ratios-table-1"))

    @output
    @render.ui
    def binary_ratios_table_ui_p():
        update_trigger_p.get()
        print("Rendering binary ratios table for P")
        df = binary_df_p.copy()
        print("Binary DataFrame for P:\n", df)
        return ui.HTML(df.to_html(classes='table table-striped table-hover', table_id="binary-ratios-table-1", na_rep='NaN', float_format='{:.0f}'.format))

    @reactive.Effect
    @reactive.event(input.clicked_cell_ratios_table_1)
    def update_clicked_cell_p():
        cell = input.clicked_cell_ratios_table_1()
        print(f"Cell clicked in ratios table for P: {cell}")  # Debug print
        if cell:
            row, col, highlighted = cell['row'], cell['col'], cell['highlighted']
            if highlighted:
                binary_df_p.iat[row, col] = 0
            else:
                binary_df_p.iat[row, col] = 1
            update_trigger_p.set(update_trigger_p.get() + 1)

    # Zakładka I
    clicked_cells_i = reactive.Value([])
    update_trigger_i = reactive.Value(0)

    ratio_df_i = calculate_ratios(triangle_incurred())
    binary_df_i = create_binary_df(ratio_df_i)

    @output
    @render.text
    def triangle_i():
        height = input.height_i()
        return '\n'.join(' ' * (height - i - 1) + '*' * (2 * i + 1) for i in range(height))

    @output
    @render.table
    def triangle_table_i():
        print("Rendering triangle table for I")
        return triangle_incurred()

    @output
    @render.ui
    def ratios_table_ui_i():
        print("Rendering ratios table for I")
        return ui.HTML(ratio_df_i.to_html(classes='table table-striped table-hover', table_id="ratios-table-2"))

    @output
    @render.ui
    def binary_ratios_table_ui_i():
        update_trigger_i.get()
        print("Rendering binary ratios table for I")
        df = binary_df_i.copy()
        print("Binary DataFrame for I:\n", df)
        return ui.HTML(df.to_html(classes='table table-striped table-hover', table_id="binary-ratios-table-2", na_rep='NaN', float_format='{:.0f}'.format))

    @reactive.Effect
    @reactive.event(input.clicked_cell_ratios_table_2)
    def update_clicked_cell_i():
        cell = input.clicked_cell_ratios_table_2()
        print(f"Cell clicked in ratios table for I: {cell}")  # Debug print
        if cell:
            row, col, highlighted = cell['row'], cell['col'], cell['highlighted']
            if highlighted:
                binary_df_i.iat[row, col] = 0
            else:
                binary_df_i.iat[row, col] = 1
            update_trigger_i.set(update_trigger_i.get() + 1)

# Tworzenie aplikacji
app = App(app_ui, server)

if __name__ == "__main__":
    app.run()
