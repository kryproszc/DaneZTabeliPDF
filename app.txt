#include <windows.h>
#include <iostream>
#include <string>
int main() {
    HANDLE hPipeRead, hPipeWrite;

    SECURITY_ATTRIBUTES saAttr = { sizeof(SECURITY_ATTRIBUTES) };
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    if (!CreatePipe(&hPipeRead, &hPipeWrite, &saAttr, 0)) {
        std::cerr << "CreatePipe failed.\n";
        return 1;
    }

    SetHandleInformation(hPipeRead, HANDLE_FLAG_INHERIT, 0);

    STARTUPINFO si = { sizeof(STARTUPINFO) };
    si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;
    si.hStdOutput = hPipeWrite;
    si.hStdError = hPipeWrite;
    si.wShowWindow = SW_HIDE;

    PROCESS_INFORMATION pi;

    wchar_t cmd[] = L"curl http://dft-everace:8080/search.php?q=WANDY%20RUTKIEWICZ%20A%20WrocÅ‚aw";

    BOOL bSuccess = CreateProcess(
        NULL,
        cmd,
        NULL,
        NULL,
        TRUE,
        0,
        NULL,
        NULL,
        &si,
        &pi
    );

    if (!bSuccess) {
        std::cerr << "CreateProcess failed.\n";
        CloseHandle(hPipeWrite);
        CloseHandle(hPipeRead);
        return 1;
    }

    CloseHandle(hPipeWrite);

    const int bufferSize = 4096;
    char buffer[bufferSize];
    DWORD bytesRead;

    std::string output;
    while (ReadFile(hPipeRead, buffer, bufferSize, &bytesRead, NULL) && bytesRead != 0) {
        output.append(buffer, bytesRead);
    }

    std::cout << "Dane : " << output << std::endl;

    CloseHandle(hPipeRead);
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);

    return 0;
}