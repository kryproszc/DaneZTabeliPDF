$(document).on('click', 'td', function() {
    var row = $(this).closest('tr').index();
    var col = $(this).index();
    var tableId = $(this).closest('table').attr('id');
    if ($(this).hasClass('highlighted')) {
        $(this).removeClass('highlighted');
        Shiny.setInputValue('clicked_cell', {row: row, col: col - 1, highlighted: false, tableId: tableId});
    } else {
        $(this).addClass('highlighted');
        Shiny.setInputValue('clicked_cell', {row: row, col: col - 1, highlighted: true, tableId: tableId});
    }
});


def server(input: Inputs, output: Outputs, session: Session):
    clicked_cells1 = reactive.Value([])
    clicked_cells2 = reactive.Value([])
    update_trigger1 = reactive.Value(0)
    update_trigger2 = reactive.Value(0)

    @reactive.Calc
    def triangle_paid():
        data = {
            "AY": [1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990],
            1: [5012, 106, 3410, 5655, 1092, 1513, 557, 1351, 3133, 2063],
            2: [8269, 4285, 8992, 11555, 9565, 6445, 4020, 6947, 5395, None],
            3: [10907, 5396, 13873, 15766, 15836, 11702, 10946, 13112, None, None],
            4: [11805, 10666, 16141, 21266, 22169, 12935, 12314, None, None, None],
            5: [13539, 13782, 18735, 23425, 25955, 15852, None, None, None, None],
            6: [16181, 15599, 22214, 26083, 26180, None, None, None, None, None],
            7: [18009, 15496, 22863, 27067, None, None, None, None, None, None],
            8: [18608, 16169, 23466, None, None, None, None, None, None, None],
            9: [18662, 16704, None, None, None, None, None, None, None, None],
            10: [18834, None, None, None, None, None, None, None, None, None]
        }
        df = pd.DataFrame(data)
        return df

    def triangle_incurred():
        data = {
            "AY": [1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990],
            1: [100, 106, 110, 5655, 1092, 1513, 557, 1351, 3133, 2063],
            2: [8269, 4285, 8992, 11555, 9565, 6445, 4020, 6947, 5395, None],
            3: [10907, 5396, 13873, 15766, 15836, 11702, 10946, 13112, None, None],
            4: [11805, 10666, 16141, 21266, 22169, 12935, 12314, None, None, None],
            5: [13539, 13782, 18735, 23425, 25955, 15852, None, None, None, None],
            6: [16181, 15599, 22214, 26083, 26180, None, None, None, None, None],
            7: [18009, 15496, 22863, 27067, None, None, None, None, None, None],
            8: [18608, 16169, 23466, None, None, None, None, None, None, None],
            9: [18662, 16704, None, None, None, None, None, None, None, None],
            10: [18834, None, None, None, None, None, None, None, None, None]
        }
        df = pd.DataFrame(data)
        return df

    @render.table
    def triangle_table():
        df_trian = triangle_paid()
        return df_trian

    @render.table
    def triangle_table_incurred():
        df_trian = triangle_incurred()
        return df_trian

    @reactive.Calc
    def ratio_df():
        df_input = triangle_paid()
        ratio_df_pd = yh.calculate_ratios(df_input)
        return ratio_df_pd

    @reactive.Calc
    def ratio_df_incurred():
        df_input = triangle_incurred()
        ratio_df_pd = yh.calculate_ratios(df_input)
        return ratio_df_pd

    @reactive.Calc
    def binary_df():
        ratio_df_pd = ratio_df()
        binary_df = yh.create_binary_df(ratio_df_pd)
        return binary_df

    @reactive.Calc
    def binary_df_incurred():
        ratio_df_pd = ratio_df_incurred()
        binary_df = yh.create_binary_df(ratio_df_pd)
        return binary_df

    @output
    @render.ui
    def ratios_table_ui():
        df_ratio_out = ratio_df()
        return ui.HTML(df_ratio_out.to_html(classes='table table-striped table-hover', table_id="ratios-table1"))

    @output
    @render.ui
    def ratios_table_ui_incurred():
        df_ratio_out = ratio_df_incurred()
        return ui.HTML(df_ratio_out.to_html(classes='table table-striped table-hover', table_id="ratios-table2"))

    @output
    @render.ui
    def binary_ratios_table_ui():
        update_trigger1.get()
        binary_df_pd = binary_df()
        return ui.HTML(binary_df_pd.to_html(classes='table table-striped table-hover', table_id="binary-ratios-table1", na_rep='NaN', float_format='{:.0f}'.format))

    @output
    @render.ui
    def binary_ratios_table_ui_incurred():
        update_trigger2.get()
        binary_df_pd = binary_df_incurred()
        return ui.HTML(binary_df_pd.to_html(classes='table table-striped table-hover', table_id="binary-ratios-table2", na_rep='NaN', float_format='{:.0f}'.format))

    @reactive.Effect
    @reactive.event(input.clicked_cell)
    def update_clicked_cell():
        cell = input.clicked_cell()
        if cell:
            tableId = cell['tableId']
            if tableId == "ratios-table1":
                binary_df_inter = binary_df()
                current_cells = clicked_cells1.get()
                update_trigger = update_trigger1
            elif tableId == "ratios-table2":
                binary_df_inter = binary_df_incurred()
                current_cells = clicked_cells2.get()
                update_trigger = update_trigger2
            else:
                return

            row, col, highlighted = cell['row'], cell['col'], cell['highlighted']
            if highlighted:
                if (row, col) not in current_cells:
                    current_cells.append((row, col))
                    binary_df_inter.iat[row, col] = 0  # Update the value to 0
            else:
                if (row, col) in current_cells:
                    current_cells.remove((row, col))
                    binary_df_inter.iat[row, col] = 1  # Update the value to 1

            if tableId == "ratios-table1":
                clicked_cells1.set(current_cells)
            else:
                clicked_cells2.set(current_cells)

            update_trigger.set(update_trigger.get() + 1)  # Trigger re-render

    @output
    @render.image
    def image():
        from pathlib import Path
        dir = Path(__file__).resolve().parent
        img: ImgData = {"src": str(dir / "Model Ryzyka Rezerw.png"), "width": "1600px", "height": "900px"}
        return img

app = App(app_ui, server)
run_app(app)
