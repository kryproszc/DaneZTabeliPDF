void prepareData(int nr_sim, int woj, int mies)
{
    int exposure_number = exponsure_longitude[woj][mies].size();

    if (exposure_number > 0)
    {
        int binom_fire = randBin(exposure_number, list_list_wyb[woj][mies]);

        if (binom_fire > 0)
        {
            auto& results = vector_data[nr_sim][woj][mies];  // bezpo≈õrednie odniesienie do odpowiedniego miejsca w vector_data
            results.binom_fire = binom_fire;

            std::vector<int> pom_index_fire(exposure_number);
            std::iota(std::begin(pom_index_fire), std::end(pom_index_fire), 0);
            results.fire_sources_list = sample_vec(pom_index_fire, binom_fire);

            for (int nr_budynku : results.fire_sources_list)
            {
                auto out_data = haversine_loop_cpp_vec(200, nr_budynku, woj, mies);
                results.spread_results.emplace_back(std::move(out_data));
            }
        }
    }

    std::cout << "Zakonczone dla " << nr_sim << " " << woj << " " << mies << std::endl;
}