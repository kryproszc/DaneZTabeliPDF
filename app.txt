import math

class PCG32:
    def __init__(self, seed=None):
        self.state = seed if seed is not None else 0x853c49e6748fea9b
        self.inc = 0xda3e39cb94b95bdb

    def random(self):
        oldstate = self.state
        self.state = oldstate * 6364136223846793005 + (self.inc | 1)
        xorshifted = (((oldstate >> 18) ^ oldstate) >> 27) & 0xFFFFFFFF
        rot = (oldstate >> 59) & 0xFFFFFFFF
        return (xorshifted >> rot) | (xorshifted << ((-rot) & 31)) & 0xFFFFFFFF

    def random_float(self):
        return self.random() / 0xFFFFFFFF

    def normal(self, mean, sigma, size=1):
        return [mean + sigma * math.sqrt(-2.0 * math.log(self.random_float())) * math.cos(2.0 * math.pi * self.random_float()) for _ in range(size)]

    def lognormal(self, mean, sigma, size=1):
        normal_values = self.normal(mean, sigma, size)
        return [math.exp(val) for val in normal_values]

    def chisquare(self, df, size=1):
        return [sum((self.normal(0, 1)[0]) ** 2 for _ in range(df)) for _ in range(size)]

from pcg32 import PCG32


import numpy as np
from pcg32 import PCG32

def main():
    mean = 0
    sigma = 1
    size = 100000
    df = 200

    pcg32 = PCG32(seed=42)

    # Generowanie liczb z rozkładu normalnego
    normal_samples = pcg32.normal(mean, sigma, size)
    normal_mean = np.mean(normal_samples)
    normal_quantile = np.quantile(normal_samples, 0.95)
    print(f"Mean for normal distribution (PCG32): {normal_mean}")
    print(f"95th percentile for normal distribution (PCG32): {normal_quantile}")

    # Generowanie liczb z rozkładu lognormalnego
    lognormal_samples = pcg32.lognormal(mean, sigma, size)
    lognormal_mean = np.mean(lognormal_samples)
    lognormal_quantile = np.quantile(lognormal_samples, 0.95)
    print(f"Mean for lognormal distribution (PCG32): {lognormal_mean}")
    print(f"95th percentile for lognormal distribution (PCG32): {lognormal_quantile}")

    # Generowanie liczb z rozkładu chi-kwadrat
    chisquare_samples = pcg32.chisquare(df, size)
    chisquare_mean = np.mean(chisquare_samples)
    chisquare_quantile = np.quantile(chisquare_samples, 0.95)
    print(f"Mean for chi-square distribution (PCG32): {chisquare_mean}")
    print(f"95th percentile for chi-square distribution (PCG32): {chisquare_quantile}")

if __name__ == "__main__":
    main()
