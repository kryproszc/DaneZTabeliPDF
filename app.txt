library(sf)
library(classInt)
library(RColorBrewer)

# Przekształcenie wartości 0 na 0.1, aby uniknąć problemów z logarytmiczną transformacją
df_joined$ilosc[df_joined$ilosc == 0] <- 0.1

# Ustalanie wartości minimalnej i maksymalnej
minimal_value <- 1
max_value <- max(df_joined$ilosc, na.rm = TRUE)

# Tworzenie dynamicznych przedziałów na podstawie wartości >= 1
# Używamy `classIntervals` do podziału na 20 równych przedziałów od wartości minimalnej do maksymalnej
intervals <- classIntervals(df_joined$ilosc[df_joined$ilosc >= minimal_value], n = 20, style = "quantile")

# Dodanie przedziału [0, 1), aby uwzględnić gminy z małymi wartościami
breaks <- c(0, intervals$brks)
breaks <- unique(breaks)  # Usunięcie duplikatów na wypadek powtarzających się wartości
print(breaks)

# Tworzenie etykiet dla kategorii
labels <- c(
  "[0, 1)",  # Etykieta dla wartości < 1, które będą wyświetlane na biało i nie będą oznaczane kolorami
  sprintf("[%.1f, %.1f)", breaks[-c(1, length(breaks))], breaks[-c(1, 2)])
)

# Modyfikacja ostatniej etykiety, aby była w formie zamkniętej [ostatnia wartość, max_value]
labels[length(labels)] <- sprintf("[%.1f, %.1f]", breaks[length(breaks) - 1], max_value)

# Przypisanie kategorii do danych z uwzględnieniem przedziałów
df_joined$ilosc_category <- cut(
  df_joined$ilosc,
  breaks = breaks,
  include.lowest = TRUE,
  labels = labels,
  right = TRUE  # Ostatni przedział zamknięty, aby obejmował wartość maksymalną
)

# Pozostawienie kategorii "Brak danych" w `ilosc_category` jako `NA`
df_joined$ilosc_category[df_joined$ilosc < 1] <- NA  # Wartości poniżej 1 (czyli `[0, 1)`) oraz `NA` będą miały wartość `NA`

# Usunięcie pustych kategorii z `ilosc_category`
df_joined$ilosc_category <- droplevels(df_joined$ilosc_category)

# Sprawdzenie aktualnych poziomów kategorii (po usunięciu pustych)
print("Aktualne poziomy kategorii po usunięciu pustych:")
print(levels(df_joined$ilosc_category))

# Tworzenie gradientu kolorów od jasnych do intensywnie czerwonych
grad_colors <- colorRampPalette(c("lightyellow", "orange", "red", "darkred"))(20)

# Przypisanie białego koloru dla gmin z `NA` (czyli brak danych lub wartości w przedziale `[0, 1)`)
colors_to_use <- c("white", grad_colors)

# Tworzenie palety kolorów na podstawie aktualnych kategorii `ilosc_category`
pal <- setNames(colors_to_use, c("Brak danych", levels(df_joined$ilosc_category)))

# Wyświetlenie przypisania kolorów do kategorii w celu weryfikacji
print("Przypisanie kolorów do istniejących kategorii:")
print(pal)

# Sprawdzenie, czy gminy z maksymalną wartością są poprawnie przypisane po filtracji
max_value_clean <- max(df_joined$ilosc, na.rm = TRUE)
print("Gminy z maksymalną wartością po przypisaniu kategorii:")
print(df_joined[df_joined$ilosc == max_value_clean, c("ilosc", "ilosc_category")])

# Tworzenie pliku graficznego PNG i zapis w bieżącym katalogu roboczym
png(filename = "mapa_gmin_statyczna_20_przedzialow_czerwone.png", width = 10, height = 8, units = "in", res = 300)

# Rysowanie mapy z przypisaniem kolorów do kategorii
plot(
  df_joined_simplified["ilosc_category"],
  col = pal[ifelse(is.na(df_joined_simplified$ilosc_category), "Brak danych", df_joined_simplified$ilosc_category)],  # Przypisanie kolorów
  main = "Mapa gmin z podziałem na 20 przedziałów i białymi gminami z małymi wartościami",
  key.pos = NULL  # Wyłączenie wbudowanej legendy
)

# Dodanie legendy z kolorem białym dla gmin z brakującymi wartościami oraz pozostałymi przedziałami
legend("topright",
       legend = c("Brak danych", levels(df_joined$ilosc_category)),  # Legendy dla wszystkich kategorii
       fill = colors_to_use,  # Kolory z uwzględnieniem białego dla brakujących danych
       title = "Liczba budynków",
       cex = 0.8,
       bg = "white",
       bty = "n")

# Zakończenie zapisywania do pliku
dev.off()
