import numpy as np

class PCG32:
    def __init__(self, state=0x4d595df4d0f33173, inc=0x14057b7ef767814f):
        self.state = state
        self.inc = inc

    def random(self):
        oldstate = self.state
        self.state = oldstate * 6364136223846793005 + (self.inc | 1)
        xorshifted = (((oldstate >> 18) ^ oldstate) >> 27) & 0xFFFFFFFF
        rot = oldstate >> 59
        return (xorshifted >> rot) | (xorshifted << ((-rot) & 31))

    def random_float(self, size=1):
        return np.array([self.random() / (1 << 32) for _ in range(size)], dtype=np.float32)

    def normal(self, mean, sigma, size=1):
        NV_MAGICCONST = 4 * np.exp(-0.5) / np.sqrt(2.0)
        random = self.random_float
        results = []
        
        while len(results) < size:
            u1 = random()
            u2 = 1.0 - random()
            z = NV_MAGICCONST * (u1 - 0.5) / u2
            zz = z * z / 4.0
            if zz <= -np.log(u2):
                results.append(mean + z * sigma)
        
        return np.array(results, dtype=np.float32)

    def lognormal(self, mean, sigma, size=1):
        normal_values = self.normal(mean, sigma, size)
        return np.exp(normal_values)

    def chisquare(self, df, size=1):
        normal_samples = self.normal(0, 1, size * df)
        normal_samples = normal_samples.reshape(size, df)
        return np.sum(normal_samples ** 2, axis=1)
