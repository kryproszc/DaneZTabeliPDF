import numpy as np
import matplotlib.pyplot as plt

class PCG_XSH_RR:
    def __init__(self, seed):
        self.state = seed
        self.inc = 0x853c49e6748fea9b  # Default increment for PCG

    def pcg32_random(self):
        oldstate = self.state
        self.state = oldstate * 6364136223846793005 + self.inc
        xorshifted = (((oldstate >> 18) ^ oldstate) >> 27) & 0xFFFFFFFF
        rot = (oldstate >> 59) & 0xFFFFFFFF
        return (xorshifted >> rot) | (xorshifted << ((-rot) & 31)) & 0xFFFFFFFF

    def random(self, size=None):
        if size is None:
            return (self.pcg32_random() / 0xFFFFFFFF) + np.finfo(float).eps
        else:
            return np.array([(self.pcg32_random() / 0xFFFFFFFF) + np.finfo(float).eps for _ in range(size)])

# Inicjalizacja generatora PCG-XSH-RR
seed = 42  # Możesz ustawić swój seed
rng = PCG_XSH_RR(seed)

# Funkcje do generowania rozkładów
def generate_normal(mu, sigma, size):
    u1 = rng.random(size)
    u2 = rng.random(size)
    z0 = np.sqrt(-2.0 * np.log(u1)) * np.cos(2 * np.pi * u2)
    z1 = np.sqrt(-2.0 * np.log(u1)) * np.sin(2 * np.pi * u2)
    return np.concatenate((z0, z1))[:size] * sigma + mu

def generate_chi_squared(df, size):
    return np.sum([generate_normal(0, 1, size) ** 2 for _ in range(df)], axis=0)

def generate_lognormal(mean, sigma, size):
    normal_samples = generate_normal(mean, sigma, size)
    return np.exp(normal_samples)

# Parametry
mu, sigma = 0, 1  # Parametry dla rozkładu normalnego
df = 2           # Stopnie swobody dla rozkładu chi-kwadrat
mean, sigma_ln = 0, 1  # Parametry dla rozkładu lognormalnego
size = 1000      # Liczba próbek

# Generowanie próbek
normal_samples = generate_normal(mu, sigma, size)
chi_squared_samples = generate_chi_squared(df, size)
lognormal_samples = generate_lognormal(mean, sigma_ln, size)

# Wyświetlanie wyników
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.hist(normal_samples, bins=50, alpha=0.7, color='blue')
plt.title('Normal Distribution')

plt.subplot(1, 3, 2)
plt.hist(chi_squared_samples, bins=50, alpha=0.7, color='green')
plt.title('Chi-Squared Distribution')

plt.subplot(1, 3, 3)
plt.hist(lognormal_samples, bins=50, alpha=0.7, color='red')
plt.title('Lognormal Distribution')

plt.tight_layout()
plt.show()
