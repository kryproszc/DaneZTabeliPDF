# Filtrujemy wartości >= 1, aby wyznaczyć dynamiczne przedziały
values_above_1 <- df_joined$ilosc[df_joined$ilosc >= 1]

# Wyznaczenie dynamicznych przedziałów na podstawie wartości >= 1
# Używamy `classIntervals()` do podziału na 5 przedziałów
intervals <- classIntervals(values_above_1, n = 5, style = "quantile")

# Połączenie ręcznie ustalonego przedziału [0, 0.1] z automatycznie wyznaczonymi przedziałami
breaks <- c(0, 0.1, intervals$brks)  # Łączymy ręcznie ustalone wartości z dynamicznymi
breaks <- unique(breaks)  # Usunięcie duplikatów (na wszelki wypadek)

# Sprawdzenie, czy `breaks` są unikalne i poprawne
print(breaks)

# Stworzenie kolumny z kategoriami na podstawie dynamicznych przedziałów
df_joined$ilosc_category <- cut(
  df_joined$ilosc,
  breaks = breaks,  # Użycie połączonych przedziałów
  include.lowest = TRUE,
  dig.lab = 10,
  right = FALSE  # Ustawienie, czy przedziały mają być prawostronnie otwarte czy zamknięte
)

# Definiowanie kolorów
colors <- c("[0, 0.1)" = "lightgray", "#fee0d2", "#fc9272", "#fb6a4a", "#de2d26", "#a50f15", "#67000d")

# Sprawdzenie liczności w poszczególnych przedziałach
print(table(df_joined$ilosc_category))

# Tworzenie mapy z odpowiednimi przedziałami i kolorami
ggplot(data = df_joined) +
  geom_sf(aes(fill = ilosc_category), color = "black") +  # Kolorowanie gmin na podstawie kategorii `ilosc_category`
  scale_fill_manual(
    values = colors,
    name = "Liczba budynków",  # Tytuł legendy
    labels = levels(df_joined$ilosc_category)  # Automatyczne etykiety na podstawie podziałów
  ) +
  theme_minimal() +
  labs(title = "Mapa gmin z liczbą budynków podzieloną na dynamiczne przedziały") +
  theme(
    plot.title = element_text(hjust = 0.5),
    legend.position = "right"
  )
