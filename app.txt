library(sf)
library(classInt)
library(RColorBrewer)

# Przekształcenie wartości 0 na 0.1, aby uniknąć problemów z logarytmiczną transformacją
df_joined$ilosc[df_joined$ilosc == 0] <- 0.1

# Ustalanie wartości minimalnej i maksymalnej
minimal_value <- 1
max_value <- max(df_joined$ilosc, na.rm = TRUE)

# Dynamiczne przedziały: równy rozstęp (max_value / 10)
break_interval <- max_value / 10
breaks <- seq(minimal_value, max_value - break_interval, by = break_interval)

# Dodanie przedziałów [0, 1) oraz maksymalnej wartości, aby zamknąć przedział
breaks <- c(0, 1, breaks, max_value)
breaks <- unique(breaks)

# Sprawdzenie przedziałów
print("Przedziały breaks:")
print(breaks)

# Tworzenie etykiet dla przedziałów
labels <- c("[0, 1)", sprintf("[%.1f, %.1f)", breaks[-c(1, length(breaks))], breaks[-c(1, 2)]))

# Modyfikacja ostatniej etykiety, aby była w formie zamkniętej [ostatnia wartość, max_value]
labels[length(labels)] <- sprintf("[%.1f, %.1f]", breaks[length(breaks) - 1], max_value)

# Sprawdzenie poprawności etykiet
print("Etykiety labels:")
print(labels)

# Przypisanie kategorii do danych z uwzględnieniem przedziałów
df_joined$ilosc_category <- cut(
  df_joined$ilosc,
  breaks = breaks,
  include.lowest = TRUE,
  labels = labels,
  right = TRUE  # Ostatni przedział zamknięty, aby obejmował wartość maksymalną
)

# Sprawdzenie przypisania kategorii
print("Liczba obserwacji w każdej kategorii:")
print(table(df_joined$ilosc_category, useNA = "ifany"))

# Wyświetlenie gmin z maksymalną wartością, aby sprawdzić, czy są poprawnie przypisane
print("Gminy z maksymalną wartością:")
print(df_joined[df_joined$ilosc == max_value, c("ilosc", "ilosc_category")])

# Tworzenie 11 kolorów dla przedziałów [1, max_value] oraz szarego dla [0, 1)
grad_colors <- colorRampPalette(c("lightgray", "yellow", "orange", "red", "darkred"))(11)

# Definicja kolorów: przypisanie koloru dla kategorii
colors_to_use <- grad_colors

# Tworzenie palety kolorów na podstawie kategorii `ilosc_category`
pal <- setNames(colors_to_use, levels(df_joined$ilosc_category))

# Wyświetlenie palety w celu sprawdzenia przypisania kolorów
print("Przypisanie kolorów do kategorii:")
print(pal)

# Sprawdzenie przypisania kolorów do kategorii (bez `NA`)
pal <- pal[!is.na(pal)]

# Sprawdzenie wszystkich wartości `ilosc` dla gmin w każdej kategorii (w celu weryfikacji)
print("Przypisane kategorie i liczba budynków w każdej kategorii:")
for (level in levels(df_joined$ilosc_category)) {
  cat("Kategoria:", level, "\n")
  print(df_joined[df_joined$ilosc_category == level, c("ilosc")])
}

# Tworzenie pliku graficznego PNG i zapis w bieżącym katalogu roboczym
png(filename = "mapa_gmin_statyczna_11_przedzialow_gradacja.png", width = 10, height = 8, units = "in", res = 300)

# Rysowanie mapy z przypisaniem kolorów do kategorii
plot(
  df_joined_simplified["ilosc_category"],
  col = pal[df_joined_simplified$ilosc_category],  # Przypisanie kolorów bezpośrednio do kategorii
  main = "Mapa gmin z dynamicznie podzielonymi przedziałami budynków",
  key.pos = NULL  # Wyłączenie wbudowanej legendy
)

# Dodanie legendy tylko dla wartości >= 1 (pominięcie kategorii `NA`)
legend("topright",
       legend = levels(df_joined$ilosc_category)[-1],  # Pominięcie etykiety dla NA (wartości < 1)
       fill = colors_to_use[-1],  # Kolory tylko dla wartości >= 1 (bez szarego)
       title = "Liczba budynków",
       cex = 0.8,
       bg = "white",
       bty = "n")

# Zakończenie zapisywania do pliku
dev.off()
