calculate_development_factors <- function(triangle) {
  n <- nrow(triangle)
  m <- ncol(triangle)
  development_factors <- matrix(NA, n, m)
  
  for (j in 2:m) {
    for (i in 1:(n-j+1)) {
      if (!is.na(triangle[i, j]) && !is.na(triangle[i, j-1]) && triangle[i, j-1] != 0) {
        development_factors[i, j-1] <- triangle[i, j] / triangle[i, j-1]
      }
    }
  }
  return(development_factors)
}
calculate_unbiased_development_factors <- function(triangle, development_factors,weights) {
  n <- nrow(triangle)
  m <- ncol(triangle)
  unbiased_factors <- numeric(m - 1)
  
  for (j in 2:m) {
    C_ij <- numeric()
    F_ij <- numeric()
    for (i in 1:(n - j + 1)) {
      if (!is.na(triangle[i, j]) && !is.na(triangle[i, j - 1]) && triangle[i, j - 1] != 0) {
        C_ij <- c(C_ij, triangle[i, j - 1]*weights[i, j - 1])
        F_ij <- c(F_ij, (triangle[i, j] / triangle[i, j - 1])*weights[i, j - 1])
      }
    }
    if (length(C_ij) > 0) {
      unbiased_factors[j - 1] <- sum(C_ij * F_ij) / sum(C_ij)
    } else {
      unbiased_factors[j - 1] <- NA
    }
  }
  return(unbiased_factors)
}
calculate_variance_factors <- function(triangle, development_factors,weight) {
  n <- nrow(triangle)
  m <- ncol(triangle)
  variance_factors <- numeric(m-1)
  
  for (j in 2:(m)) {
    numerator <- 0
    denominator <- sum(!is.na(weight[, j-1]))-2
    for (i in 1:(n-j+1)) {
      if (!is.na(triangle[i, j]) && !is.na(triangle[i, j-1]) && triangle[i, j-1] != 0) {
        C_ij <- triangle[i, j-1]
        F_ij <- triangle[i, j] / triangle[i, j-1]
        f_j <- development_factors[j-1]
        numerator <- numerator + weight[i, j-1]*C_ij * (F_ij - f_j)^2
        # denominator <- denominator + C_ij
      }
    }
    if(j==(m)){
      variance_factors[j-1] = min((variance_factors[j-2]^2)/(variance_factors[j-3]),min(variance_factors[j-3],variance_factors[j-2]))
    }
    else{
      variance_factors[j-1] <- numerator/denominator
      
    }
  }
  return(sqrt(variance_factors))
}
calculate_sd_factors <- function(tr_paid,sigma_in,weight) {
  n <- nrow(tr_paid)
  m <- ncol(tr_paid)
  sd_factors <- numeric(m-1)
  
  for (j in 2:(m)) {
    denominator<-0
    for (i in 1:(n-j+1)) {
      denominator <- denominator+tr_paid[i, j-1]*weight[i, j-1]
    }
    sd_factors[j-1]<-sigma_in[j-1]^2/denominator
  }
  return(sqrt(sd_factors))
}
####
create_pattern_matrix <- function(df_paid_l, pattern_number) {
  # Replace non-NA values with 1 and NA values with NaN
  reduced_df <- df_paid_l
  reduced_df[!is.na(reduced_df)] <- 1
  reduced_df[is.na(reduced_df)] <- NaN
  
  # Get the number of rows (assuming a square matrix)
  size <- nrow(reduced_df)
  reduced_df_copy <- reduced_df
  
  # Loop to set specific elements to 0
  for (j in 1:size) {
    for (i in 1:(size - pattern_number)) {
      if (i <= (size - pattern_number - j + 1)) {
        reduced_df_copy[i, j] <- 0
      }
    }
  }
  
  return(reduced_df_copy)
}
