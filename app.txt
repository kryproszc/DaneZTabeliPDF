library(sf)
library(classInt)
library(RColorBrewer)

# Przekształcenie wartości 0 na 0.1, aby uniknąć problemów z logarytmiczną transformacją
df_joined$ilosc[df_joined$ilosc == 0] <- 0.1

# Ustalanie wartości minimalnej i maksymalnej
minimal_value <- 1
max_value <- max(df_joined$ilosc, na.rm = TRUE)

# Dynamiczne przedziały: równy rozstęp (max_value / 10)
break_interval <- max_value / 10
breaks <- seq(minimal_value, max_value - break_interval, by = break_interval)

# Dodanie przedziałów [0, 1) oraz maksymalnej wartości, aby zamknąć przedział
breaks <- c(0, 1, breaks, max_value)
breaks <- unique(breaks)

# Tworzenie etykiet dla przedziałów
labels <- c("[0, 1)", sprintf("[%.1f, %.1f)", breaks[-c(1, length(breaks))], breaks[-c(1, 2)]))

# Modyfikacja ostatniej etykiety, aby była w formie zamkniętej [ostatnia wartość, max_value]
labels[length(labels)] <- sprintf("[%.1f, %.1f]", breaks[length(breaks) - 1], max_value)

# Przypisanie kategorii do danych z uwzględnieniem przedziałów
df_joined$ilosc_category <- cut(
  df_joined$ilosc,
  breaks = breaks,
  include.lowest = TRUE,
  labels = labels,
  right = TRUE  # Ostatni przedział zamknięty, aby obejmował wartość maksymalną
)

# Usunięcie pustych kategorii, które nie mają żadnych obserwacji
levels(df_joined$ilosc_category) <- levels(df_joined$ilosc_category)[table(df_joined$ilosc_category) > 0]

# Sprawdzenie przypisania kategorii i liczby obserwacji
print("Liczba obserwacji w każdej kategorii po usunięciu pustych kategorii:")
print(table(df_joined$ilosc_category, useNA = "ifany"))

# Tworzenie kontrastowej palety kolorów (wypróbuj różne palety np. "Spectral", "RdYlBu", "Dark2")
palette_name <- "Spectral"
grad_colors <- rev(brewer.pal(n = length(levels(df_joined$ilosc_category)), palette_name))

# Przypisanie kolorów tylko do istniejących kategorii
colors_to_use <- grad_colors

# Tworzenie palety kolorów na podstawie aktualnych kategorii `ilosc_category`
pal <- setNames(colors_to_use, levels(df_joined$ilosc_category))

# Wyświetlenie przypisania kolorów do kategorii w celu weryfikacji
print("Przypisanie kolorów do istniejących kategorii:")
print(pal)

# Tworzenie pliku graficznego PNG i zapis w bieżącym katalogu roboczym
png(filename = "mapa_gmin_statyczna_kontrastowe_kolory.png", width = 10, height = 8, units = "in", res = 300)

# Rysowanie mapy z przypisaniem kolorów do kategorii
plot(
  df_joined_simplified["ilosc_category"],
  col = pal[df_joined_simplified$ilosc_category],  # Przypisanie kolorów bezpośrednio do kategorii
  main = "Mapa gmin z dynamicznie podzielonymi przedziałami budynków",
  key.pos = NULL  # Wyłączenie wbudowanej legendy
)

# Dodanie legendy tylko dla istniejących kategorii (pominięcie pustych)
legend("topright",
       legend = levels(df_joined$ilosc_category),  # Legendy tylko dla istniejących kategorii
       fill = colors_to_use,  # Kolory tylko dla wartości >= 1 (bez szarego)
       title = "Liczba budynków",
       cex = 0.8,
       bg = "white",
       bty = "n")

# Zakończenie zapisywania do pliku
dev.off()
