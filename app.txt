import numpy as np

class PCG32:
    def __init__(self, seed=None):
        if seed is not None:
            self.state = seed
        else:
            self.state = 0x4d595df4d0f33173
        self.inc = 0xda3e39cb94b95bdb

    def random(self):
        oldstate = self.state
        self.state = oldstate * 6364136223846793005 + (self.inc | 1)
        xorshifted = (((oldstate >> 18) ^ oldstate) >> 27) & 0xFFFFFFFF
        rot = oldstate >> 59
        return ((xorshifted >> rot) | (xorshifted << ((-rot) & 31))) & 0xFFFFFFFF

    def random_float(self, size=1):
        max_int32 = 4294967295  # 2^32 - 1
        epsilon = np.finfo(float).eps
        return [(self.random() / max_int32) * (1 - 2 * epsilon) + epsilon for _ in range(size)]

    def normal(self, mean, sigma, size=1):
        results = []
        while len(results) < size:
            u1 = self.random_float(size)
            u2 = self.random_float(size)
            for i in range(size):
                z0 = np.sqrt(-2.0 * np.log(u1[i])) * np.cos(2.0 * np.pi * u2[i])
                results.append(mean + z0 * sigma)
                if len(results) == size:
                    break
        return results

    def lognormal(self, mean, sigma, size=1):
        normal_values = self.normal(mean, sigma, size)
        return [np.exp(val) for val in normal_values]

    def chisquare(self, df, size=1):
        normal_samples = self.normal(0, 1, size * df)
        normal_samples = np.reshape(normal_samples, (size, df))
        return [np.sum(sample ** 2) for sample in normal_samples]