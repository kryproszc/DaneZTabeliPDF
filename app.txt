# Sprawdzenie liczby unikalnych `REGON` w obu zbiorach danych
cat("Unikalne REGON w gminy:", length(unique(gminy$REGON)), "\n")
cat("Unikalne REGON w wynik_gminy_df:", length(unique(wynik_gminy_df$REGON)), "\n")

# Sprawdzenie, które `REGON` w `gminy` nie mają odpowiedników w `wynik_gminy_df`
missing_REGON <- setdiff(gminy$REGON, wynik_gminy_df$REGON)
cat("Liczba brakujących REGON w wynik_gminy_df:", length(missing_REGON), "\n")
print(missing_REGON)

# Sprawdzenie, czy istnieją duplikaty REGON w `wynik_gminy_df`
duplikaty <- wynik_gminy_df %>%
  group_by(REGON) %>%
  summarise(count = n()) %>%
  filter(count > 1)

cat("Liczba zduplikowanych REGON:", nrow(duplikaty), "\n")
print(duplikaty)

 Zamiana NA na 0 dla kolumny `total_budynkow` i ponowne sumowanie
gminy_z_budynkami$total_budynkow[is.na(gminy_z_budynkami$total_budynkow)] <- 0
total_sum_after_join <- sum(gminy_z_budynkami$total_budynkow)
cat("Suma liczby budynków po `left_join` (po zamianie NA na 0):", total_sum_after_join, "\n")


# Użycie `inner_join` zamiast `left_join`
gminy_z_budynkami_inner <- inner_join(gminy, wynik_gminy_df, by = "REGON")
inner_sum <- sum(gminy_z_budynkami_inner$total_budynkow, na.rm = TRUE)
cat("Suma liczby budynków po `inner_join`:", inner_sum, "\n")
