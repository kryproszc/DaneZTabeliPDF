#include <iostream>
#include <vector>
#include <thread>
#include <sys/epoll.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <unistd.h>
#include <fcntl.h>
#include <cstring>
#include <fstream>
#include <chrono>
#include <memory>
#include <algorithm>
#include <iomanip>
#include <sstream>

const int NUM_REQUESTS = 100;
const int NUM_THREADS = 10;
const char* HOST = "127.0.0.1";
const char* PORT = "8080";

const std::vector<std::string> ADDRESSES = {
    "AL. TADEUSZA KOŚCIUSZKI 17;90-418;ŁÓDŹ;łódzkie;Polska",
    "15A;86-302;ROZGARTY;kujawsko-pomorskie;Polska",
    "LUDWIKA ZAMENHOFA 5/10;31-025;KRAKÓW;małopolskie;Polska",
    "UL. SPACEROWA 11;09-500;GOSTYNIN;mazowieckie;Polska",
    "WIŚNIOWA 38/1A;02-520;WARSZAWA;mazowieckie;Polska",
    "Aleja Solidarności 63;00-240;Warszawa;mazowieckie;Polska",
    "BRAK 0;77-207;PIASZCZYNA;pomorskie;Polska;",
    "GEN. DE GAULLE'A CHARLESA 33;43-100;TYCHY;śląskie",
    "Os. Stefana Batorego 33;60-687;Poznań;wielkopolskie;Polska",
    "LOMPY JÓZEFA 15E;40-038;KATOWICE;śląskie;Polska"
};

std::string url_encode(const std::string &value) {
    std::ostringstream escaped;
    escaped.fill('0');
    escaped << std::hex;

    for (char c : value) {
        if (isalnum(c) || c == '-' || c == '_' || c == '.' || c == '~') {
            escaped << c;
        } else {
            escaped << '%' << std::setw(2) << std::uppercase << int((unsigned char) c);
        }
    }

    return escaped.str();
}

int create_nonblocking_socket(const char* host, const char* port) {
    struct addrinfo hints, *res;
    int sockfd;

    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;

    if (getaddrinfo(host, port, &hints, &res) != 0) {
        perror("getaddrinfo");
        return -1;
    }

    sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
    if (sockfd == -1) {
        perror("socket");
        freeaddrinfo(res);
        return -1;
    }

    int flags = fcntl(sockfd, F_GETFL, 0);
    if (fcntl(sockfd, F_SETFL, flags | O_NONBLOCK) == -1) {
        perror("fcntl");
        close(sockfd);
        freeaddrinfo(res);
        return -1;
    }

    if (connect(sockfd, res->ai_addr, res->ai_addrlen) == -1) {
        if (errno != EINPROGRESS) {
            perror("connect");
            close(sockfd);
            freeaddrinfo(res);
            return -1;
        }
    }

    freeaddrinfo(res);
    return sockfd;
}

void perform_requests(int thread_id, std::shared_ptr<std::vector<std::string>>& data) {
    std::string address = url_encode(ADDRESSES[thread_id]);
    std::string request = "GET /search.php?q=" + address + " HTTP/1.1\r\nHost: 127.0.0.1:8080\r\nConnection: keep-alive\r\n\r\n";

    (*data)[thread_id] = "Dane z wątku " + std::to_string(thread_id) + "\n\n";

    int epoll_fd = epoll_create1(0);
    if (epoll_fd == -1) {
        perror("epoll_create1");
        exit(1);
    }

    int sockfd = create_nonblocking_socket(HOST, PORT);
    if (sockfd == -1) {
        exit(1);
    }

    epoll_event ev, events[NUM_REQUESTS];

    ev.events = EPOLLOUT | EPOLLET;
    ev.data.fd = sockfd;
    if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, sockfd, &ev) == -1) {
        perror("epoll_ctl: EPOLLOUT");
        close(sockfd);
        exit(1);
    }

    int requests_sent = 0;
    bool keep_going = true;

    while (keep_going) {
        int nfds = epoll_wait(epoll_fd, events, NUM_REQUESTS, -1);
        if (nfds == -1) {
            perror("epoll_wait");
            exit(1);
        }

        for (int n = 0; n < nfds; ++n) {
            if (events[n].events & EPOLLOUT && requests_sent < NUM_REQUESTS) {
                ssize_t bytes_sent = send(sockfd, request.c_str(), request.length(), 0);
                if (bytes_sent == -1) {
                    perror("send");
                    keep_going = false;
                    break;
                }
                requests_sent++;
                ev.events = EPOLLIN | EPOLLET;
                ev.data.fd = sockfd;
                if (epoll_ctl(epoll_fd, EPOLL_CTL_MOD, sockfd, &ev) == -1) {
                    perror("epoll_ctl: EPOLLIN");
                    keep_going = false;
                    break;
                }
            } else if (events[n].events & EPOLLIN) {
                char buffer[4096];
                std::string response;
                ssize_t bytes_read;
                while ((bytes_read = read(sockfd, buffer, sizeof(buffer))) > 0) {
                    response.append(buffer, bytes_read);
                }

                if (bytes_read == -1 && errno != EAGAIN && errno != EWOULDBLOCK) {
                    perror("read");
                    keep_going = false;
                } else if (bytes_read == 0) {
                    keep_going = false;
                } else {
                    if (requests_sent < NUM_REQUESTS) {
                        ev.events = EPOLLOUT | EPOLLET;
                        ev.data.fd = sockfd;
                        if (epoll_ctl(epoll_fd, EPOLL_CTL_MOD, sockfd, &ev) == -1) {
                            perror("epoll_ctl: EPOLLOUT");
                            keep_going = false;
                        }
                    } else {
                        keep_going = false;
                    }
                }

                if (!response.empty()) {
                    (*data)[thread_id] += response;
                }
            }
        }
    }

    close(sockfd);
    close(epoll_fd);
}

int main() {
    auto start_time = std::chrono::high_resolution_clock::now();

    std::vector<std::thread> threads;
    auto data = std::make_shared<std::vector<std::string>>(NUM_THREADS);

    for (int i = 0; i < NUM_THREADS; ++i) {
        threads.emplace_back(perform_requests, i, std::ref(data));
    }

    for (auto& t : threads) {
        t.join();
    }

    for (size_t i = 0; i < data->size(); ++i) {
        std::string filename = "thread_" + std::to_string(i) + ".txt";
        std::ofstream output_file(filename);

        if (!output_file.is_open()) {
            std::cerr << "Nie można otworzyć pliku: " << filename << std::endl;
            continue;
        }

        output_file << (*data)[i];
        output_file.close();
    }

    auto end_time = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end_time - start_time;
    std::cout << "czas: " << elapsed.count() << " s" << std::endl;

    return 0;
}
