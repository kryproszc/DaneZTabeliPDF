int main()
{

    int currentIndex = 0;

    csvstream csvin("proba.csv");

    std::vector<std::pair<std::string, std::string>> row;

    std::string sklejone = "";
    auto start = std::chrono::high_resolution_clock::now();

    while (csvin >> row)
    {
        for (const auto &[key, value] : row)
        {
            if (key == "Ulica")
            {
                sklejone = "";
                sklejone += removeWordsWithDot(removeApartmentNumber(value)) + ";";
            }
            else if (key == "KodPocztowy")
            {
                sklejone += value + ";";
            }
            else if (key == "Miasto")
            {
                    sklejone += value + ";";
            }
            else if (key == "Wojewodztwo")
            {
                sklejone += value + ";";
            }
            else if (key == "Kraj")
            {
                sklejone += value; 

                addString((allStrings), sklejone, (currentIndex));

            }
        }
    }
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration = end - start;
    std::cout << "Czas: " << duration.count() << " sekund\n";

    // for (size_t i = 0; i < allStrings.size(); ++i) {
    //         std::cout << "Vector " << i << ": ";
    //         for (const auto& s : allStrings[i]) {
    //             std::cout << s << " ";
    //         }
    //         std::cout << std::endl;
    //     }
    for(;;){}

    std::vector<std::thread> threads;
    auto data = std::make_shared<std::vector<std::string>>(NUM_THREADS);

    for (int i = 0; i < NUM_THREADS; i++) {
        threads.emplace_back(perform_requests, i, std::ref(data));
    }

    for (auto& t : threads) {
        t.join();
    }

    for (size_t i = 0; i < data->size(); i++) {
        std::string filename = "thread_" + std::to_string(i) + ".txt";
        std::ofstream output_file(filename);

        if (!output_file.is_open()) {
            std::cerr << "Nie można otworzyć pliku: " << filename << std::endl;
            continue;
        }

        output_file << (*data)[i];
        output_file.close();
    }

    return 0;
}