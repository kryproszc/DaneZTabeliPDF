class VectorPozarRozprzestrzeniony
{
public:
    std::vector<std::vector<double>> build_fire_rozprzestrzeniony;
    VectorPozarRozprzestrzeniony() : build_fire_rozprzestrzeniony(11, std::vector<double>()) {}

    void addPozarRozprzestrzeniony(std::vector<std::vector<double>> spread_one_building)
    {
        for (int ttt = 0; ttt < 11; ttt++)
        {
            build_fire_rozprzestrzeniony[ttt].insert(
                build_fire_rozprzestrzeniony[ttt].end(),
                spread_one_building[ttt].begin(),
                spread_one_building[ttt].end());
        }
    }
    std::vector<std::vector<double>> returnPozarRozprzestrzeniony() const
    {
        return (build_fire_rozprzestrzeniony);
    }

    void writeCSV(std::string& filePath, std::string& fileName)
    {
        std::string fullFilePath = filePath + "/" + fileName;
        std::ofstream file(fullFilePath);

        file << "Insurer,BuildingNumber,Woj,Mies,IndexTable,Longitude,Latitude,SumValue,WielkoscPozarKwota,ReasFire\n"; // dopasuj nagłówek do rzeczywistej liczby kolumn

        int rows = build_fire_rozprzestrzeniony.size();
        if (rows == 0)
            return;

        int max_cols = 0;
        for (const auto& row : build_fire_rozprzestrzeniony)
        {
            if (row.size() > max_cols)
                max_cols = row.size();
        }

        for (int col = 0; col < max_cols; ++col)
        {

            for (int row = 0; row < rows; ++row)
            {
                if (col < build_fire_rozprzestrzeniony[row].size())
                {
                    file << build_fire_rozprzestrzeniony[row][col];
                }
                else
                {
                    file << "";
                }

                if (row < rows - 1)
                    file << ",";
            }
            file << "\n";
        }
    }

    void writeCSV(std::ofstream& file) const
    {
        file << "Insurer,BuildingNumber,Woj,Mies,IndexTable,Longitude,Latitude,SumValue,WielkoscPozarKwota,ReasFire\n";  // dopasuj nagłówek do rzeczywistej liczby kolumn

        int rows = build_fire_rozprzestrzeniony.size();
        if (rows == 0) return;


        int max_cols = 0;
        for (const auto& row : build_fire_rozprzestrzeniony) {
            if (row.size() > max_cols)
                max_cols = row.size();
        }

        for (int col = 0; col < max_cols; ++col)
        {

            for (int row = 0; row < rows; ++row)
            {
                if (col < build_fire_rozprzestrzeniony[row].size()) {
                    file << build_fire_rozprzestrzeniony[row][col];
                }
                else {
                    file << "";
                }

                if (row < rows - 1)
                    file << ",";
            }
            file << "\n";
        }
    }
};