#define _WIN32_WINNT 0x0600 
#include <ws2tcpip.h>
#include <winsock2.h>
#include <iostream>
#include <fstream>
#include <string>

void printLastError(const std::string& function) {
    int error = WSAGetLastError();
    LPVOID lpMsgBuf;
    FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
        NULL,
        error,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        (LPTSTR)&lpMsgBuf,
        0, NULL);

    std::cerr << function << " blad: " << error << " - " << (char*)lpMsgBuf << std::endl;
    LocalFree(lpMsgBuf);
}

bool initialize_connection(SOCKET& ConnectSocket, const std::string& address, int port) {
    WSADATA wsaData;
    struct sockaddr_in serverAddr;
    int iResult;

    iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iResult != 0) {
        printLastError("WSAStartup");
        return false;
    }

    ConnectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (ConnectSocket == INVALID_SOCKET) {
        printLastError("socket");
        WSACleanup();
        return false;
    }

    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(port);
    iResult = inet_pton(AF_INET, address.c_str(), &serverAddr.sin_addr);
    if (iResult <= 0) {
        closesocket(ConnectSocket);
        WSACleanup();
        return false;
    }

    iResult = connect(ConnectSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
    if (iResult == SOCKET_ERROR) {
        closesocket(ConnectSocket);
        WSACleanup();
        return false;
    }

    return true;
}

std::string send_request(SOCKET& ConnectSocket, const std::string& httpRequest) {
    int iResult = send(ConnectSocket, httpRequest.c_str(), httpRequest.length(), 0);
    if (iResult == SOCKET_ERROR) {
        printLastError("send");
        return "";
    }

    char recvbuf[512];
    int recvbuflen = 512;
    std::string response = "";
    do {
        iResult = recv(ConnectSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
            response.append(recvbuf, iResult);
        } else if (iResult == 0) {
            std::cerr << "polaczenie zamkniete przez serwer" << std::endl;
            break;
        } else {
            printLastError("recv");
            break;
        }
    } while (iResult > 0);

    return response;
}

void cleanup_connection(SOCKET& ConnectSocket) {
    closesocket(ConnectSocket);
    WSACleanup();
}

int main() {
    SOCKET ConnectSocket = INVALID_SOCKET;
    std::string address = "172.25.9.44";
    int port = 8080;
    std::ofstream outfile("dane.csv", std::ios::out | std::ios::app);
    if (!outfile.is_open()) {
        std::cerr << "nie moge otworzyc pliku" << std::endl;
        return 1;
    }

    if (!initialize_connection(ConnectSocket, address, port)) {
        std::cerr << "problem z pol." << std::endl;
        return 1;
    }

    std::string httpRequest =
        "GET /search.php?q=WANDY%20RUTKIEWICZ%20A%20WrocÅ‚aw HTTP/1.1\r\n"
        "Host: dft-everace:8080\r\n"
        "Connection: keep-alive\r\n\r\n";

    for (int i = 0; i < 100; ++i) {
        std::string response = send_request(ConnectSocket, httpRequest);
        if (!response.empty()) {
            outfile << "\"" << response << "\"" << std::endl;
        } else {
            std::cerr << "problem z otrzymaniem odpowiedzi" << i << std::endl;
            break;
        }
    }

    cleanup_connection(ConnectSocket);
    outfile.close();
    return 0;
}